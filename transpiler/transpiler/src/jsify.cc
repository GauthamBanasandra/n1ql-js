#line 2 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.cc"

#line 4 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 54
#define YY_END_OF_BUFFER 55
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[342] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   55,   52,   53,    6,    8,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   10,   52,   52,   49,   50,   48,   51,
        3,   51,    5,   54,    7,    9,   11,    1,    4,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    2,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       34,    0,    0,    0,   37,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       30,    0,   31,    0,    0,    0,   34,    0,   16,    0,
        0,   37,    0,   19,   38,    0,   39,    0,    0,   41,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   30,    0,   12,   31,    0,   13,   32,    0,
       33,    0,    0,    0,    0,    0,   38,    0,   20,   39,

        0,   21,   40,    0,   41,    0,   23,    0,   43,    0,
       45,    0,   44,    0,   46,    0,   47,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
        0,   14,   33,    0,   15,   35,    0,   36,    0,    0,
        0,   40,    0,   22,    0,   42,    0,   43,    0,   25,
       45,    0,   27,   44,    0,   26,   46,    0,   28,   47,
        0,   29,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   35,    0,   17,   36,    0,   18,    0,   42,

        0,   24,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    5,    6,
        1,    7,    1,    1,    1,    1,    8,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    9,   10,    1,
        6,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,    1,   18,    1,   19,   20,   21,   22,   23,   24,
        1,   25,   26,   27,   28,   29,    1,   30,    1,    1,
        1,    1,    1,    1,    1,   31,   32,   12,   33,   14,

       15,   34,   17,    1,   35,    1,   19,   20,   21,   36,
       37,   24,    1,   38,   26,   39,   40,   41,    1,   30,
        1,    1,   42,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[43] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[344] =
    {   0,
        0,    0,   40,   41,   42,   45,  739,  738,   43,   50,
       52,   53,   56,   57,  740,  743,  743,  743,  743,   54,
      719,   35,   39,   51,  708,   40,   42,   46,  722,   45,
      721,  720,  710,  743,   46,  701,  743,  743,  743,  743,
      743,  724,  743,  743,  743,  743,  743,  743,  743,   42,
       55,  716,  710,   56,   70,   68,   63,   76,   71,  714,
       75,  708,   86,  691,  688,  743,  710,  704,   87,  708,
      698,   88,  701,  699,   77,  704,  703,  700,  692,   92,
       83,  700,   96,  699,  680,  112,   92,  698,   95,   96,
      123,   99,   97,  134,  106,   93,  113,  696,  129,  689,

      690,  129,  114,  119,  669,  161,  145,  147,  692,  691,
      156,  164,  141,  134,  181,  168,  189,  200,  161,  202,
      182,  690,  689,  185,  688,  186,  667,  681,  186,  183,
      202,  670,  190,  191,  124,  684,  193,  683,  682,  671,
      230,  220,  232,  234,  240,  242,  244,  252,  743,  679,
      216,  254,  256,  743,  258,  262,  266,  268,  270,  275,
      278,  678,  280,  283,  288,  293,  297,  653,  266,  283,
      670,  660,  251,  288,  284,  255,  293,  286,  660,  293,
      650,  299,  314,  328,  743,  330,  333,  743,  335,  338,
      340,  343,  345,  348,  350,  353,  358,  361,  743,  363,

      366,  743,  374,  371,  379,  376,  743,  384,  387,  389,
      392,  395,  397,  402,  407,  409,  412,  417,  629,  645,
      635,  391,  635,  621,  217,  620,  616,  292,  617,  611,
      594,  560,  396,  399,  551,  406,  532,  423,  431,  439,
      427,  743,  443,  447,  743,  451,  453,  455,  459,  463,
      465,  468,  473,  743,  476,  478,  480,  488,  490,  743,
      496,  500,  743,  504,  506,  743,  508,  516,  743,  518,
      521,  743,  333,  529,  400,  408,  523,  456,  462,  528,
      461,  503,  511,  497,  503,  465,  405,  430,  477,  512,
      537,  542,  550,  552,  743,  558,  554,  743,  562,  566,

      570,  743,  574,  576,  578,  586,  588,  596,  598,  369,
      311,  535,  568,  607,  612,  543,  617,  567,  293,  233,
      589,  204,  594,  622,  627,  632,  636,  641,  182,  571,
      646,  166,  651,  656,  661,  666,  671,  676,  681,  686,
      743,  154,   71
    } ;

static yyconst flex_int16_t yy_def[344] =
    {   0,
      341,    1,  342,  342,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
        0,  341,  341
    } ;

static yyconst flex_int16_t yy_nxt[786] =
    {   0,
       16,   16,   17,   18,   19,   16,   16,   20,   16,   16,
       21,   22,   23,   24,   25,   26,   27,   28,   16,   16,
       29,   16,   16,   30,   31,   32,   16,   33,   16,   16,
       34,   21,   23,   35,   28,   16,   16,   31,   16,   33,
       36,   16,   38,   38,   41,   44,   45,   41,   42,   39,
       39,   42,   44,   45,   44,   44,   46,   46,   44,   44,
       48,   49,   51,   52,   56,   53,   57,   58,   67,   60,
       56,   40,   68,   75,   51,   54,   52,   56,   71,   57,
       67,   58,   60,   56,   72,   64,   47,   47,   54,   68,
       74,   76,   71,   73,   75,   78,   80,   89,   95,   83,

       92,   77,  100,   81,   74,  101,  103,  114,   78,   76,
       80,   84,   95,  106,  106,   81,  107,  118,   89,  101,
       92,  109,  110,  100,  111,  111,  113,  103,  114,  107,
      118,  112,  117,  109,  110,  115,  115,  119,  113,  121,
      125,  124,  116,  126,  117,  177,  141,  141,  143,  143,
      119,  151,  125,  142,   37,  144,  126,  147,  147,  177,
      121,  124,  106,  106,  112,  148,  148,  150,  151,  153,
      153,  128,  129,  130,  131,  132,  133,  134,  135,  150,
      340,  136,  152,  152,  137,  138,  139,  159,  140,  116,
      155,  155,  128,  130,  133,  135,  338,  156,  138,  159,

      140,  157,  157,  160,  160,  149,  162,  171,  158,  154,
      161,  165,  167,  170,  175,  176,  172,  179,  336,  162,
      171,  184,  184,  165,  167,  170,  173,  175,  176,  278,
      179,  183,  183,  186,  186,  187,  187,  195,  142,  173,
      144,  189,  189,  191,  191,  193,  193,  334,  190,  278,
      192,  195,  112,  148,  148,  196,  196,  153,  153,  197,
      197,  185,  116,  198,  198,  228,  156,  200,  200,  201,
      201,  203,  203,  224,  158,  188,  205,  205,  204,  206,
      206,  209,  209,  161,  211,  211,  228,  224,  210,  213,
      213,  212,  220,  149,  215,  215,  214,  154,  217,  217,

      221,  216,  225,  199,  220,  218,  227,  333,  229,  202,
      231,  226,  236,  281,  233,  238,  238,  221,  230,  207,
      227,  234,  142,  231,  237,  328,  229,  281,  233,  184,
      184,  239,  239,  234,  187,  187,  240,  240,  144,  241,
      241,  243,  243,  190,  244,  244,  193,  193,  192,  246,
      246,  248,  248,  112,  196,  196,  247,  308,  249,  250,
      250,  116,  198,  198,  251,  251,  156,  201,  201,  185,
      308,  158,  253,  253,  188,  252,  252,  206,  206,  242,
      255,  255,  204,  327,  245,  256,  256,  161,  258,  258,
      259,  259,  257,  261,  261,  210,  262,  262,  264,  264,

      212,  275,  199,  265,  265,  214,  286,  202,  267,  267,
      268,  268,  254,  270,  270,  216,  289,  207,  271,  271,
      218,  287,  275,  320,  238,  238,  310,  286,  241,  241,
      260,  142,  239,  239,  311,  287,  263,  289,  310,  144,
      291,  291,  321,  266,  292,  292,  311,  190,  244,  244,
      269,  192,  293,  293,  294,  294,  296,  296,  272,  247,
      297,  297,  321,  249,  250,  250,  251,  251,  242,  299,
      299,  156,  313,  158,  253,  253,  204,  255,  255,  300,
      300,  301,  301,  312,  161,  319,  257,  314,  245,  303,
      303,  259,  259,  313,  295,  312,  210,  304,  304,  314,

      298,  262,  262,  322,  212,  305,  305,  265,  265,  306,
      306,  317,  214,  318,  254,  322,  216,  268,  268,  307,
      307,  302,  271,  271,  149,  149,  218,  315,  149,  154,
      154,  260,  149,  154,  318,  316,  323,  154,  291,  291,
      315,  263,  309,  292,  292,  190,  290,  266,  316,  323,
      192,  324,  324,  294,  294,  297,  297,  269,  247,  325,
      325,  329,  272,  299,  299,  288,  249,  326,  326,  331,
      204,  301,  301,  329,  257,  303,  303,  304,  304,  305,
      305,  331,  210,  285,  212,  330,  214,  306,  306,  307,
      307,  332,  339,  295,  216,  298,  218,  185,  185,  188,

      188,  185,  330,  188,  332,  185,  339,  188,  199,  199,
      284,  302,  199,  202,  202,  335,  199,  202,  207,  207,
      337,  202,  207,  324,  324,  283,  207,  335,  325,  325,
      247,  282,  337,  326,  326,  249,  280,  242,  242,  279,
      257,  242,  245,  245,  277,  242,  245,  254,  254,  276,
      245,  254,  260,  260,  274,  254,  260,  263,  263,  273,
      260,  263,  266,  266,   86,  263,  266,  269,  269,  235,
      266,  269,  272,  272,  232,  269,  272,  295,  295,  223,
      272,  295,  298,  298,  222,  295,  298,  302,  302,  219,
      298,  302,  208,  194,  182,  302,  181,  180,  178,  174,

      169,  168,  166,  164,  163,  146,  145,  127,  123,  122,
      120,  108,  105,  104,  102,   99,   98,   97,   96,   94,
       93,   91,   90,   88,   87,   86,   85,   82,   79,   70,
       69,   66,   65,   63,   62,   61,   59,   55,   50,  341,
       43,   43,   15,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341
    } ;

static yyconst flex_int16_t yy_chk[786] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    5,    9,    9,    6,    5,    3,
        4,    6,   10,   10,   11,   12,   11,   12,   13,   14,
       20,   20,   22,   23,   26,   24,   27,   28,   50,   30,
       35,  343,   51,   57,   22,   24,   23,   26,   54,   27,
       50,   28,   30,   35,   55,   35,   13,   14,   24,   51,
       56,   58,   54,   55,   57,   59,   61,   69,   75,   63,

       72,   58,   80,   61,   56,   81,   83,   93,   59,   58,
       61,   63,   75,   86,   86,   61,   87,   96,   69,   81,
       72,   89,   90,   80,   91,   91,   92,   83,   93,   87,
       96,   91,   95,   89,   90,   94,   94,   97,   92,   99,
      103,  102,   94,  104,   95,  135,  107,  107,  108,  108,
       97,  114,  103,  107,  342,  108,  104,  111,  111,  135,
       99,  102,  106,  106,  111,  112,  112,  113,  114,  116,
      116,  106,  106,  106,  106,  106,  106,  106,  106,  113,
      332,  106,  115,  115,  106,  106,  106,  119,  106,  115,
      117,  117,  106,  106,  106,  106,  329,  117,  106,  119,

      106,  118,  118,  120,  120,  112,  121,  130,  118,  116,
      120,  124,  126,  129,  133,  134,  131,  137,  322,  121,
      130,  142,  142,  124,  126,  129,  131,  133,  134,  225,
      137,  141,  141,  143,  143,  144,  144,  151,  141,  131,
      143,  145,  145,  146,  146,  147,  147,  320,  145,  225,
      146,  151,  147,  148,  148,  152,  152,  153,  153,  155,
      155,  142,  152,  156,  156,  176,  155,  157,  157,  158,
      158,  159,  159,  173,  157,  144,  160,  160,  159,  161,
      161,  163,  163,  160,  164,  164,  176,  173,  163,  165,
      165,  164,  169,  148,  166,  166,  165,  153,  167,  167,

      170,  166,  174,  156,  169,  167,  175,  319,  177,  158,
      178,  174,  182,  228,  180,  183,  183,  170,  177,  161,
      175,  180,  183,  178,  182,  311,  177,  228,  180,  184,
      184,  186,  186,  180,  187,  187,  189,  189,  186,  190,
      190,  191,  191,  189,  192,  192,  193,  193,  191,  194,
      194,  195,  195,  193,  196,  196,  194,  273,  195,  197,
      197,  196,  198,  198,  200,  200,  197,  201,  201,  184,
      273,  200,  204,  204,  187,  203,  203,  206,  206,  190,
      205,  205,  203,  310,  192,  208,  208,  205,  209,  209,
      210,  210,  208,  211,  211,  209,  212,  212,  213,  213,

      211,  222,  198,  214,  214,  213,  233,  201,  215,  215,
      216,  216,  204,  217,  217,  215,  236,  206,  218,  218,
      217,  234,  222,  287,  238,  238,  275,  233,  241,  241,
      210,  238,  239,  239,  276,  234,  212,  236,  275,  239,
      240,  240,  288,  214,  243,  243,  276,  240,  244,  244,
      216,  243,  246,  246,  247,  247,  248,  248,  218,  246,
      249,  249,  288,  248,  250,  250,  251,  251,  241,  252,
      252,  250,  279,  251,  253,  253,  252,  255,  255,  256,
      256,  257,  257,  278,  255,  286,  256,  281,  244,  258,
      258,  259,  259,  279,  247,  278,  258,  261,  261,  281,

      249,  262,  262,  289,  261,  264,  264,  265,  265,  267,
      267,  284,  264,  285,  253,  289,  267,  268,  268,  270,
      270,  257,  271,  271,  277,  277,  270,  282,  277,  280,
      280,  259,  277,  280,  285,  283,  290,  280,  291,  291,
      282,  262,  274,  292,  292,  291,  237,  265,  283,  290,
      292,  293,  293,  294,  294,  297,  297,  268,  293,  296,
      296,  312,  271,  299,  299,  235,  296,  300,  300,  316,
      299,  301,  301,  312,  300,  303,  303,  304,  304,  305,
      305,  316,  303,  232,  304,  313,  305,  306,  306,  307,
      307,  318,  330,  294,  306,  297,  307,  308,  308,  309,

      309,  308,  313,  309,  318,  308,  330,  309,  314,  314,
      231,  301,  314,  315,  315,  321,  314,  315,  317,  317,
      323,  315,  317,  324,  324,  230,  317,  321,  325,  325,
      324,  229,  323,  326,  326,  325,  227,  327,  327,  226,
      326,  327,  328,  328,  224,  327,  328,  331,  331,  223,
      328,  331,  333,  333,  221,  331,  333,  334,  334,  220,
      333,  334,  335,  335,  219,  334,  335,  336,  336,  181,
      335,  336,  337,  337,  179,  336,  337,  338,  338,  172,
      337,  338,  339,  339,  171,  338,  339,  340,  340,  168,
      339,  340,  162,  150,  140,  340,  139,  138,  136,  132,

      128,  127,  125,  123,  122,  110,  109,  105,  101,  100,
       98,   88,   85,   84,   82,   79,   78,   77,   76,   74,
       73,   71,   70,   68,   67,   65,   64,   62,   60,   53,
       52,   42,   36,   33,   32,   31,   29,   25,   21,   15,
        8,    7,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
#line 2 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
// Copyright (c) 2017 Couchbase, Inc.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an "AS IS"
// BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied. See the License for the specific language governing
// permissions and limitations under the License.

	#include <list>
	#include <algorithm>
  #include "n1ql.h"

	lex_op_code lex_op;
	int pos_type_len[2];
	std::list<InsertedCharsInfo> *insertions;
	ParseInfo parse_info;
	// Contains the output plain JavaScript code.
	std::string js_code, n1ql_query;
	// Storing the state for resuming on switch.
	int previous_state;

#line 761 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.cc"

#define INITIAL 0
#define N1QL 1
#define MLCMT 2
#define SLCMT 3
#define DSTR 4
#define SSTR 5
#define TSTR 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 28 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"

	previous_state=YYSTATE;
#line 950 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 342 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 743 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 30 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{
		/* Start of a multi-line comment */
		previous_state = YYSTATE;
		BEGIN MLCMT;
		js_code += "/*";
	}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 36 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{
		/* Stop of a multi-line comment */
		js_code += "*/";
		BEGIN previous_state;
	}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 41 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{
		js_code += "\n";
	}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 44 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{
		/* Single-line comment */
		previous_state = YYSTATE;
		BEGIN SLCMT;
		js_code += "//";
	}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 50 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{
		BEGIN previous_state;
		js_code += "\n";
	}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 54 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{HandleStrStart(DSTR); /* Handling double-quoted string */}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 55 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{HandleStrStop(DSTR);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 56 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{HandleStrStart(SSTR); /* Handling single-quoted string */}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 57 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{HandleStrStop(SSTR);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 58 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{HandleStrStart(TSTR); /* Handling templated string */}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 59 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{HandleStrStop(TSTR);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 60 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordAlter; /* Checking the constraints in this section */}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 61 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordBuild;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 62 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordCreate;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 63 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordDelete;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 64 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordDrop;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 65 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordExecute;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 66 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordExplain;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 67 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordFrom;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 68 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordGrant;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 69 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordInfer;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 70 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordInsert;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 71 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordMerge;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 72 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordPrepare;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 73 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordRename;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 74 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordSelect;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 75 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordRevoke;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 76 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordUpdate;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 77 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{return kKeywordUpsert;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
#line 79 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 31:
/* rule 31 can match eol */
#line 80 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 32:
/* rule 32 can match eol */
#line 81 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 33:
/* rule 33 can match eol */
#line 82 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 34:
/* rule 34 can match eol */
#line 83 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 35:
/* rule 35 can match eol */
#line 84 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 36:
/* rule 36 can match eol */
#line 85 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 37:
/* rule 37 can match eol */
#line 86 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 38:
/* rule 38 can match eol */
#line 87 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 39:
/* rule 39 can match eol */
#line 88 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 40:
/* rule 40 can match eol */
#line 89 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 41:
/* rule 41 can match eol */
#line 90 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 42:
/* rule 42 can match eol */
#line 91 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 43:
/* rule 43 can match eol */
#line 92 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 44:
/* rule 44 can match eol */
#line 93 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 45:
/* rule 45 can match eol */
#line 94 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 46:
/* rule 46 can match eol */
#line 95 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 95 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{
		BEGIN N1QL;

		n1ql_query = std::string(yytext);
		// The '\n' might be consumed by the regex above
		// It's essential to replace it with a space as multi-line string with single-quotes isn't possible in JavaScript
		ReplaceRecentChar(n1ql_query, '\n', ' ');

		if(lex_op == kCommentN1QL) {
				UpdatePos(insert_type::kN1QLBegin);
				js_code += "/*" + std::string(yytext);
		}
	}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{
		BEGIN INITIAL;

		n1ql_query += ";";
		switch(lex_op) {
			case kJsify:
				js_code += TranspileQuery(n1ql_query);
				break;

			case kUniLineN1QL:
				js_code += n1ql_query;
				break;

			case kCommentN1QL:
      	js_code += "*/$;";
      	UpdatePos(insert_type::kN1QLEnd);
      
				parse_info = ParseQuery(n1ql_query);
				if(!parse_info.is_valid) {
					return kN1QLParserError;
				}
        
				break;
		}
	}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 133 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{
		n1ql_query += std::string(yytext);

		if(lex_op == kCommentN1QL) {
				// For kCommentN1QL, instead of appending the character read, we substitute a '*'
				// This is done because it will be ambiguous to JavaScript parser if it sees comment in N1QL query.
				js_code += "*";
		}
	}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 142 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{
		n1ql_query += " ";

		if(lex_op == kCommentN1QL) {
			js_code += "\n";
		}
	}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 149 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{js_code += std::string(yytext);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 150 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{js_code += std::string(yytext);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 151 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
{js_code += "\n";}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 152 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"
ECHO;
	YY_BREAK
#line 1361 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(N1QL):
case YY_STATE_EOF(MLCMT):
case YY_STATE_EOF(SLCMT):
case YY_STATE_EOF(DSTR):
case YY_STATE_EOF(SSTR):
case YY_STATE_EOF(TSTR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 342 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 342 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 341);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 152 "/Users/gautham/projects/github/n1ql-js/transpiler/transpiler/src/jsify.l"


// Parses the given input string.
int TransformSource(const char* input, std::string *output, Pos *last_pos) {
	// Set the input stream.
	yy_scan_string(input);

	// pos_type_len represents the length that each insert_type will take
	pos_type_len[static_cast<std::size_t>(insert_type::kN1QLBegin)] = 2;
	pos_type_len[static_cast<std::size_t>(insert_type::kN1QLEnd)] = 3;

	int code = yylex();

	// Clear the buffer allocation after the lex.
	yy_delete_buffer(YY_CURRENT_BUFFER);

	*output = js_code;
	if(last_pos != nullptr) {
		UpdatePos(last_pos);
	}

	// Clear the global variable for the next input.
	js_code = "";
	return code;
}

// Converts N1QL embedded JS to native JS.
JsifyInfo Jsify(const std::string &input) {
	lex_op = kJsify;
	JsifyInfo info;

	info.code = TransformSource(input.c_str(), &info.handler_code, &info.last_pos);
	return info;
}

// Unilines Multiline N1QL embeddings.
UniLineN1QLInfo UniLineN1QL(const std::string &input) {
	lex_op = kUniLineN1QL;
	UniLineN1QLInfo info;

	info.code = TransformSource(input.c_str(), &info.handler_code, &info.last_pos);
	return info;
}

// Comments out N1QL statements and substitutes $ in its place
CommentN1QLInfo CommentN1QL(const std::string &input) {
	lex_op = kCommentN1QL;
	CommentN1QLInfo info;

	insertions = &info.insertions;
	info.code = TransformSource(input.c_str(), &info.handler_code, &info.last_pos);
	info.parse_info = parse_info;
	return info;
}

// Update line number, column number and index based on the current value of js_code
void UpdatePos(Pos *pos) {
	pos->line_no = std::count(js_code.begin(), js_code.end(), '\n') + 1;
	for(auto c = js_code.crbegin(); (c != js_code.crend()) && (*c != '\n'); ++c) {
		++pos->col_no;
	}

 // To make col_no atleast 1
	++pos->col_no;
	pos->index = js_code.length() == 0 ? 0 : js_code.length() - 1;
}

// Adds an entry to keep track of N1QL queries in the js_code
void UpdatePos(insert_type type) {
	InsertedCharsInfo pos(type);
	if(!insertions->empty()) {
		pos = insertions->back();
	}

	// Count the number of newlines since the previously updated pos
	pos.line_no = std::count(js_code.begin() + pos.line_no, js_code.end(), '\n') + 1;
	switch(type) {
		case insert_type::kN1QLBegin:
			pos.index = js_code.length();
			pos.type = insert_type::kN1QLBegin;
			pos.type_len = pos_type_len[static_cast<std::size_t>(insert_type::kN1QLBegin)];
		break;

		case insert_type::kN1QLEnd:
			pos.index = js_code.length() - 1;
			pos.type = insert_type::kN1QLEnd;
			pos.type_len = pos_type_len[static_cast<std::size_t>(insert_type::kN1QLEnd)];
		break;
	}

	insertions->push_back(pos);
}

// Handles the concatenation of different types of strings.
// It tries to escape the quote of the same kind.
void HandleStrStart(int state) {
	previous_state=YYSTATE;

	switch (state) {
	case DSTR:
		BEGIN DSTR;
		js_code += "\"";
		break;

	case SSTR:
		BEGIN SSTR;
		js_code += "'";
		break;

	case TSTR:
		BEGIN TSTR;
		js_code += "`";
		break;
	}
}

// Restores the previous state and adds the appropriate closing quote.
void HandleStrStop(int state) {
	if(!IsEsc(js_code)) {
		BEGIN previous_state;
	}

	switch(state) {
	case DSTR:
		js_code += "\"";
		break;

	case SSTR:
		js_code += "'";
		break;

	case TSTR:
		js_code += "`";
		break;
	}
}

// Tests whether the quote character is escaped.
bool IsEsc(const std::string &str) {
	auto escaped = false;
	auto i = str.length();
	while(i-- > 0) {
		if(str[i] != '\\') {
			break;
		}

		escaped = !escaped;
	}

	return escaped;
}

// A default yywrap
extern "C" int yywrap() {
	return 1;
}

// Transpiles the given N1QL query into a JavaScript expression - "new N1qlQuery('...')"
std::string TranspileQuery(const std::string &query) {
	std::string query_transpiled = "new N1qlQuery('";
	for (const auto &c : query) {
		// Need to escape the escape character to preserve the raw-ness.
		// Need to escape the single quotes as the N1QL query is going to be enclosed in a single quoted string.
		if(c == '\\' || (c == '\'' && !IsEsc(query_transpiled))) {
			query_transpiled += "\\";
		}

		query_transpiled += c;
	}

	query_transpiled += "');";
	return query_transpiled;
}

// Replaces the recent occurrence of char m in str with char n
void ReplaceRecentChar(std::string &str, char m, char n) {
	auto find = str.rfind(m);
	if(find != std::string::npos) {
		str[find] = n;
	}
}

ParseInfo ParseQuery(const std::string &query) {
	ParseInfo info;
	info.is_valid = true;
	info.info = "Syntax error";
	return info;
}

