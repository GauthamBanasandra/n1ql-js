
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 52
#define YY_END_OF_BUFFER 53
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[328] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   53,   50,   51,    6,    8,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   10,   50,   50,   47,   48,   46,   49,    3,
       49,    5,   52,    7,    9,   11,    1,    4,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    2,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   33,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   29,    0,   30,    0,    0,    0,   33,
        0,   16,    0,    0,   36,    0,   37,    0,    0,   39,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   29,    0,   12,   30,    0,   13,   31,    0,   32,
        0,    0,    0,    0,   36,    0,   19,   37,    0,   20,
       38,    0,   39,    0,   22,    0,   41,    0,   43,    0,

       42,    0,   44,    0,   45,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   31,    0,   14,   32,
        0,   15,   34,    0,   35,    0,    0,    0,   38,    0,
       21,    0,   40,    0,   41,    0,   24,   43,    0,   26,
       42,    0,   25,   44,    0,   27,   45,    0,   28,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   34,    0,
       17,   35,    0,   18,    0,   40,    0,   23,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    5,    6,
        1,    7,    1,    1,    1,    1,    8,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    9,   10,    1,
        6,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,    1,   18,    1,   19,   20,   21,   22,   23,   24,
        1,   25,   26,   27,   28,   29,    1,   30,    1,    1,
        1,    1,    1,    1,    1,   31,   32,   12,   33,   14,

       15,   34,   17,    1,   35,    1,   19,   20,   21,   36,
       37,   24,    1,   38,   26,   39,   40,   41,    1,   30,
        1,    1,   42,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[43] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[330] =
    {   0,
        0,    0,   40,   41,   42,   45,  703,  702,   43,   50,
       52,   53,   56,   57,  704,  707,  707,  707,  707,   54,
      683,   35,   39,   51,  672,   40,   45,  686,   44,  685,
      684,  674,  707,  657,  664,  707,  707,  707,  707,  707,
      687,  707,  707,  707,  707,  707,  707,  707,   41,   55,
      679,  673,   47,   59,   60,   69,   61,  677,   69,  671,
       80,  654,  651,  707,  673,  667,   61,  671,  661,   83,
      664,   75,  668,  667,  664,  656,   68,   78,  664,   91,
      663,  644,  105,   79,  662,   82,   85,  111,   90,  108,
       95,  100,  101,  660,  116,  653,  654,  116,  104,  103,

      633,  148,  133,  143,  656,  655,  155,  151,  105,  149,
      168,  176,  129,  187,  157,  654,  652,  148,  651,  164,
      630,  643,  164,  169,  183,  632,  172,  111,  643,  174,
      641,  639,  623,  211,  198,  213,  203,  215,  223,  225,
      227,  707,  630,  187,  233,  235,  241,  244,  246,  249,
      251,  628,  254,  257,  259,  262,  270,  599,  192,  249,
      619,  612,  251,  187,  259,  264,  251,  610,  256,  603,
      261,  292,  279,  707,  297,  300,  707,  302,  305,  307,
      310,  315,  317,  320,  325,  312,  707,  328,  330,  707,
      336,  333,  341,  338,  707,  346,  354,  356,  358,  362,

      367,  371,  375,  379,  383,  385,  585,  599,  592,  314,
      595,  579,  338,  581,  357,  584,  576,  570,  558,  351,
      366,  565,  379,  556,  392,  397,  405,  394,  707,  407,
      415,  707,  417,  420,  422,  426,  430,  432,  435,  440,
      707,  443,  445,  447,  456,  453,  707,  458,  461,  707,
      467,  469,  707,  471,  475,  707,  481,  483,  707,  258,
      542,  448,  452,  490,  466,  380,  470,  328,  377,  521,
      419,  505,  499,  468,  471,  415,  505,  510,  513,  502,
      707,  518,  521,  707,  526,  528,  530,  707,  536,  538,
      540,  548,  550,  552,  558,  484,  451,  507,  530,  564,

      573,  542,  582,  548,  390,  353,  550,  226,  551,  591,
      593,  595,  603,  605,  224,  466,  614,  218,  616,  625,
      627,  636,  638,  647,  649,  658,  707,  154,  136
    } ;

static yyconst flex_int16_t yy_def[330] =
    {   0,
      327,    1,  328,  328,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,    0,  327,  327
    } ;

static yyconst flex_int16_t yy_nxt[750] =
    {   0,
       16,   16,   17,   18,   19,   16,   16,   20,   16,   16,
       21,   22,   23,   24,   25,   16,   26,   27,   16,   16,
       28,   16,   16,   29,   30,   31,   16,   32,   16,   16,
       33,   21,   23,   34,   27,   16,   16,   30,   16,   32,
       35,   16,   37,   37,   40,   43,   44,   40,   41,   38,
       38,   41,   43,   44,   43,   43,   45,   45,   43,   43,
       47,   48,   50,   51,   55,   52,   56,   65,   58,   69,
       72,   86,   66,   70,   50,   53,   51,   55,   96,   65,
       56,   58,   71,   69,   73,   75,   46,   46,   53,   66,
       77,   72,   86,   80,   74,   89,   91,   78,   75,   96,

       97,   99,   73,  103,   77,   81,  102,  102,  105,   78,
       91,  106,  107,  107,   97,   89,  103,  109,  110,  108,
      105,  111,   99,  106,  112,  113,  115,  120,  118,  109,
      119,  143,  166,  111,  134,  134,   39,  112,  113,  110,
      120,  135,  119,  143,  136,  136,  166,  115,  118,  102,
      102,  137,  141,  141,   36,  149,  140,  140,  122,  123,
      124,  125,  126,  108,  127,  128,  144,  149,  129,  145,
      145,  130,  131,  132,  155,  133,  146,  147,  147,  122,
      124,  152,  128,  144,  148,  131,  155,  133,  150,  150,
      157,  160,  142,  161,  152,  151,  165,  162,  168,  173,

      173,  213,  157,  160,  176,  176,  161,  163,  184,  165,
      214,  168,  172,  172,  175,  175,  178,  178,  208,  135,
      163,  137,  184,  179,  180,  180,  182,  182,  141,  141,
      208,  181,  326,  108,  185,  185,  186,  186,  324,  174,
      322,  146,  188,  188,  177,  189,  189,  191,  191,  148,
      193,  193,  194,  194,  192,  197,  197,  151,  199,  199,
      201,  201,  198,  203,  203,  200,  209,  202,  142,  215,
      204,  205,  205,  212,  223,  218,  187,  220,  206,  216,
      173,  173,  294,  209,  221,  190,  224,  212,  218,  217,
      215,  220,  195,  225,  225,  294,  221,  216,  226,  226,

      135,  176,  176,  227,  227,  137,  228,  228,  230,  230,
      179,  231,  231,  186,  186,  181,  182,  182,  233,  233,
      174,  235,  235,  108,  262,  234,  237,  237,  236,  238,
      238,  189,  189,  146,  240,  240,  148,  239,  239,  194,
      194,  177,  242,  242,  192,  262,  229,  243,  243,  151,
      265,  232,  301,  187,  244,  245,  245,  246,  246,  248,
      248,  272,  198,  249,  249,  301,  200,  320,  251,  251,
      265,  190,  252,  252,  241,  202,  254,  254,  267,  195,
      255,  255,  272,  204,  257,  257,  258,  258,  273,  275,
      299,  206,  267,  225,  225,  228,  228,  247,  226,  226,

      135,  302,  273,  250,  319,  137,  277,  277,  278,  278,
      275,  299,  253,  179,  302,  181,  231,  231,  279,  279,
      256,  280,  280,  282,  282,  234,  259,  283,  283,  304,
      236,  237,  237,  238,  238,  229,  285,  285,  146,  309,
      148,  240,  240,  192,  242,  242,  286,  286,  287,  287,
      304,  151,  309,  244,  246,  246,  232,  289,  289,  290,
      290,  281,  249,  249,  198,  314,  200,  284,  291,  291,
      252,  252,  292,  292,  296,  202,  255,  255,  297,  204,
      307,  241,  293,  293,  258,  258,  296,  325,  288,  206,
      297,  142,  142,  298,  247,  142,  300,  308,  313,  142,

      307,  325,  250,  280,  280,  298,  277,  277,  300,  308,
      253,  278,  278,  179,  310,  310,  256,  306,  181,  311,
      311,  234,  283,  283,  259,  305,  236,  285,  285,  312,
      312,  287,  287,  315,  192,  303,  244,  289,  289,  290,
      290,  291,  291,  281,  198,  315,  200,  316,  202,  292,
      292,  293,  293,  174,  174,  295,  204,  174,  206,  177,
      177,  174,  284,  177,  316,  187,  187,  177,  317,  187,
      276,  288,  318,  187,  190,  190,  321,  323,  190,  274,
      317,  271,  190,  195,  195,  318,  270,  195,  321,  323,
      269,  195,  310,  310,  311,  311,  312,  312,  268,  234,

      266,  236,  264,  244,  229,  229,  232,  232,  229,  263,
      232,  261,  229,  260,  232,  241,  241,  247,  247,  241,
       83,  247,  222,  241,  219,  247,  250,  250,  253,  253,
      250,  211,  253,  210,  250,  207,  253,  256,  256,  259,
      259,  256,  196,  259,  183,  256,  171,  259,  281,  281,
      284,  284,  281,  170,  284,  169,  281,  167,  284,  288,
      288,  164,  159,  288,  158,  156,  154,  288,  153,  139,
      138,  121,  117,  116,  114,  104,  101,  100,   98,   95,
       94,   93,   92,   90,   88,   87,   85,   84,   83,   82,
       79,   76,   68,   67,   64,   63,   62,   61,   60,   59,

       57,   54,   49,  327,   42,   42,   15,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327
    } ;

static yyconst flex_int16_t yy_chk[750] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    5,    9,    9,    6,    5,    3,
        4,    6,   10,   10,   11,   12,   11,   12,   13,   14,
       20,   20,   22,   23,   26,   24,   27,   49,   29,   53,
       55,   67,   50,   54,   22,   24,   23,   26,   77,   49,
       27,   29,   54,   53,   56,   57,   13,   14,   24,   50,
       59,   55,   67,   61,   56,   70,   72,   59,   57,   77,

       78,   80,   56,   84,   59,   61,   83,   83,   86,   59,
       72,   87,   88,   88,   78,   70,   84,   89,   90,   88,
       86,   91,   80,   87,   92,   93,   95,  100,   98,   89,
       99,  109,  128,   91,  103,  103,  329,   92,   93,   90,
      100,  103,   99,  109,  104,  104,  128,   95,   98,  102,
      102,  104,  108,  108,  328,  113,  107,  107,  102,  102,
      102,  102,  102,  107,  102,  102,  110,  113,  102,  111,
      111,  102,  102,  102,  118,  102,  111,  112,  112,  102,
      102,  115,  102,  110,  112,  102,  118,  102,  114,  114,
      120,  123,  108,  124,  115,  114,  127,  125,  130,  135,

      135,  164,  120,  123,  137,  137,  124,  125,  144,  127,
      164,  130,  134,  134,  136,  136,  138,  138,  159,  134,
      125,  136,  144,  138,  139,  139,  140,  140,  141,  141,
      159,  139,  318,  140,  145,  145,  146,  146,  315,  135,
      308,  145,  147,  147,  137,  148,  148,  149,  149,  147,
      150,  150,  151,  151,  149,  153,  153,  150,  154,  154,
      155,  155,  153,  156,  156,  154,  160,  155,  141,  165,
      156,  157,  157,  163,  171,  167,  146,  169,  157,  166,
      173,  173,  260,  160,  169,  148,  171,  163,  167,  166,
      165,  169,  151,  172,  172,  260,  169,  166,  175,  175,

      172,  176,  176,  178,  178,  175,  179,  179,  180,  180,
      178,  181,  181,  186,  186,  180,  182,  182,  183,  183,
      173,  184,  184,  182,  210,  183,  185,  185,  184,  188,
      188,  189,  189,  185,  192,  192,  188,  191,  191,  194,
      194,  176,  193,  193,  191,  210,  179,  196,  196,  193,
      213,  181,  268,  186,  196,  197,  197,  198,  198,  199,
      199,  220,  197,  200,  200,  268,  199,  306,  201,  201,
      213,  189,  202,  202,  192,  201,  203,  203,  215,  194,
      204,  204,  220,  203,  205,  205,  206,  206,  221,  223,
      266,  205,  215,  225,  225,  228,  228,  198,  226,  226,

      225,  269,  221,  200,  305,  226,  227,  227,  230,  230,
      223,  266,  202,  227,  269,  230,  231,  231,  233,  233,
      204,  234,  234,  235,  235,  233,  206,  236,  236,  271,
      235,  237,  237,  238,  238,  228,  239,  239,  237,  276,
      238,  240,  240,  239,  242,  242,  243,  243,  244,  244,
      271,  242,  276,  243,  246,  246,  231,  245,  245,  248,
      248,  234,  249,  249,  245,  297,  248,  236,  251,  251,
      252,  252,  254,  254,  262,  251,  255,  255,  263,  254,
      274,  240,  257,  257,  258,  258,  262,  316,  244,  257,
      263,  264,  264,  265,  246,  264,  267,  275,  296,  264,

      274,  316,  249,  280,  280,  265,  277,  277,  267,  275,
      252,  278,  278,  277,  279,  279,  255,  273,  278,  282,
      282,  279,  283,  283,  258,  272,  282,  285,  285,  286,
      286,  287,  287,  298,  285,  270,  286,  289,  289,  290,
      290,  291,  291,  280,  289,  298,  290,  299,  291,  292,
      292,  293,  293,  294,  294,  261,  292,  294,  293,  295,
      295,  294,  283,  295,  299,  300,  300,  295,  302,  300,
      224,  287,  304,  300,  301,  301,  307,  309,  301,  222,
      302,  219,  301,  303,  303,  304,  218,  303,  307,  309,
      217,  303,  310,  310,  311,  311,  312,  312,  216,  310,

      214,  311,  212,  312,  313,  313,  314,  314,  313,  211,
      314,  209,  313,  208,  314,  317,  317,  319,  319,  317,
      207,  319,  170,  317,  168,  319,  320,  320,  321,  321,
      320,  162,  321,  161,  320,  158,  321,  322,  322,  323,
      323,  322,  152,  323,  143,  322,  133,  323,  324,  324,
      325,  325,  324,  132,  325,  131,  324,  129,  325,  326,
      326,  126,  122,  326,  121,  119,  117,  326,  116,  106,
      105,  101,   97,   96,   94,   85,   82,   81,   79,   76,
       75,   74,   73,   71,   69,   68,   66,   65,   63,   62,
       60,   58,   52,   51,   41,   35,   34,   32,   31,   30,

       28,   25,   21,   15,    8,    7,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "n1ql_js_lex.l"
#line 2 "n1ql_js_lex.l"
// Copyright (c) 2017 Couchbase, Inc.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an "AS IS"
// BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied. See the License for the specific language governing
// permissions and limitations under the License.
	/*
	* Input:	JavaScript code embedded with N1QL statements.
	* Output:	Syntactically and semantically valid JavaScript code.
	*/
	#include <list>
  #include "n1ql.h"

	std::string parse(const char*);
	lex_op_code lex_op;

	void handle_str_start(int state);
	void handle_str_stop(int state);
	bool is_esc();

	Pos pos;
	std::list<Pos> *n1ql_pos;
	// Contains the output plain JavaScript code.
	std::string js_code;
	// Storing the state for resuming on switch.
	int previous_state;

#line 753 "lex.yy.c"

#define INITIAL 0
#define N1QL 1
#define MLCMT 2
#define SLCMT 3
#define DSTR 4
#define SSTR 5
#define TSTR 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	 yy_state_type yy_current_state;
	 char *yy_cp, *yy_bp;
	 int yy_act;
    
#line 35 "n1ql_js_lex.l"

	previous_state=YYSTATE;
#line 942 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			 YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 328 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 707 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 37 "n1ql_js_lex.l"
{
		/* Start of a multi-line comment */
		previous_state = YYSTATE;
		BEGIN MLCMT;
		js_code += "/*";
	}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 43 "n1ql_js_lex.l"
{
		/* Stop of a multi-line comment */
		js_code += "*/";
		BEGIN previous_state;
	}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 48 "n1ql_js_lex.l"
{
		js_code += "\n";
	}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 51 "n1ql_js_lex.l"
{
		/* Single-line comment */
		previous_state = YYSTATE;
		BEGIN SLCMT;
		js_code += "//";
	}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 57 "n1ql_js_lex.l"
{
		BEGIN previous_state;
		js_code += "\n";
	}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 61 "n1ql_js_lex.l"
{handle_str_start(DSTR); /* Handling double-quoted string */}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "n1ql_js_lex.l"
{handle_str_stop(DSTR);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 63 "n1ql_js_lex.l"
{handle_str_start(SSTR); /* Handling single-quoted string */}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 64 "n1ql_js_lex.l"
{handle_str_stop(SSTR);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 65 "n1ql_js_lex.l"
{handle_str_start(TSTR); /* Handling templated string */}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 66 "n1ql_js_lex.l"
{handle_str_stop(TSTR);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 67 "n1ql_js_lex.l"
{return kKeywordAlter; /* Checking the constraints in this section */}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 68 "n1ql_js_lex.l"
{return kKeywordBuild;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 69 "n1ql_js_lex.l"
{return kKeywordCreate;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 70 "n1ql_js_lex.l"
{return kKeywordDelete;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 71 "n1ql_js_lex.l"
{return kKeywordDrop;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 72 "n1ql_js_lex.l"
{return kKeywordExecute;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 73 "n1ql_js_lex.l"
{return kKeywordExplain;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 74 "n1ql_js_lex.l"
{return kKeywordGrant;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 75 "n1ql_js_lex.l"
{return kKeywordInfer;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 76 "n1ql_js_lex.l"
{return kKeywordInsert;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 77 "n1ql_js_lex.l"
{return kKeywordMerge;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 78 "n1ql_js_lex.l"
{return kKeywordPrepare;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 79 "n1ql_js_lex.l"
{return kKeywordRename;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 80 "n1ql_js_lex.l"
{return kKeywordSelect;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 81 "n1ql_js_lex.l"
{return kKeywordRevoke;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 82 "n1ql_js_lex.l"
{return kKeywordUpdate;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 83 "n1ql_js_lex.l"
{return kKeywordUpsert;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
#line 85 "n1ql_js_lex.l"
case 30:
/* rule 30 can match eol */
#line 86 "n1ql_js_lex.l"
case 31:
/* rule 31 can match eol */
#line 87 "n1ql_js_lex.l"
case 32:
/* rule 32 can match eol */
#line 88 "n1ql_js_lex.l"
case 33:
/* rule 33 can match eol */
#line 89 "n1ql_js_lex.l"
case 34:
/* rule 34 can match eol */
#line 90 "n1ql_js_lex.l"
case 35:
/* rule 35 can match eol */
#line 91 "n1ql_js_lex.l"
case 36:
/* rule 36 can match eol */
#line 92 "n1ql_js_lex.l"
case 37:
/* rule 37 can match eol */
#line 93 "n1ql_js_lex.l"
case 38:
/* rule 38 can match eol */
#line 94 "n1ql_js_lex.l"
case 39:
/* rule 39 can match eol */
#line 95 "n1ql_js_lex.l"
case 40:
/* rule 40 can match eol */
#line 96 "n1ql_js_lex.l"
case 41:
/* rule 41 can match eol */
#line 97 "n1ql_js_lex.l"
case 42:
/* rule 42 can match eol */
#line 98 "n1ql_js_lex.l"
case 43:
/* rule 43 can match eol */
#line 99 "n1ql_js_lex.l"
case 44:
/* rule 44 can match eol */
#line 100 "n1ql_js_lex.l"
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 100 "n1ql_js_lex.l"
{
		BEGIN N1QL;
		if(lex_op == kJsify) {
			js_code += "new N1qlQuery('"+ std::string(yytext) + " ";
		} else if(lex_op == kUniLineN1QL) {
			js_code += std::string(yytext);
		} else if(lex_op == kCommentN1QL) {
			pos.index = js_code.length();
			pos.line_no = std::count(js_code.begin() + pos.line_no, js_code.end(), '\n') + 1;
			pos.type = pos_type::kN1QLBegin;
			n1ql_pos->push_back(pos);

			js_code += "/*" + std::string(yytext);
		}
	}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 115 "n1ql_js_lex.l"
{
		BEGIN INITIAL;
		if(lex_op == kJsify) {
			js_code += "');";
		} else if(lex_op == kUniLineN1QL) {
			js_code += ";";
		} else if(lex_op == kCommentN1QL) {
			js_code += "*/$;";

			pos.index = js_code.length() - 1;
			pos.line_no = std::count(js_code.begin() + pos.line_no, js_code.end(), '\n') + 1;
			pos.type = pos_type::kN1QLEnd;
			n1ql_pos->push_back(pos);
		}
	}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 130 "n1ql_js_lex.l"
{
		// Need to escape the escape character to preserve the raw-ness.
		// Need to escape the single quotes as the N1QL query is going to be enclosed in a single quoted string.
		if(yytext[0] == '\\' || (yytext[0] == '\'' && !is_esc() && lex_op == kJsify)) {
			js_code += "\\";
		}

		js_code += std::string(yytext);
	}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 139 "n1ql_js_lex.l"
{
		if(lex_op == kCommentN1QL) {
			js_code += "\n";
		}
	}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 144 "n1ql_js_lex.l"
{js_code += std::string(yytext);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 145 "n1ql_js_lex.l"
{js_code += std::string(yytext);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 146 "n1ql_js_lex.l"
{js_code += "\n";}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 147 "n1ql_js_lex.l"
ECHO;
	YY_BREAK
#line 1334 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(N1QL):
case YY_STATE_EOF(MLCMT):
case YY_STATE_EOF(SLCMT):
case YY_STATE_EOF(DSTR):
case YY_STATE_EOF(SSTR):
case YY_STATE_EOF(TSTR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	 char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	 char *source = (yytext_ptr);
	 int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	 yy_state_type yy_current_state;
	 char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		 YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 328 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	 int yy_is_jam;
    	 char *yy_cp = (yy_c_buf_p);

	 YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 328 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 327);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	 int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	 int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 147 "n1ql_js_lex.l"


// Parses the given input string.
int TransformSource(const char* input, std::string *output) {
	// Set the input stream.
	yy_scan_string(input);

	// Begin lexer.
	int code = yylex();

	// Clear the buffer allocation after the lex.
	yy_delete_buffer(YY_CURRENT_BUFFER);

	// Copy the output;
	*output = js_code;

	// Clear the global variable for the next input.
	js_code = "";
	pos.index = pos.line_no = 0;

	return code;
}

// Converts N1QL embedded JS to native JS.
int Jsify(const char* input, std::string *output) {
	lex_op = kJsify;
	return TransformSource(input, output);
}

// Unilines Multiline N1QL embeddings.
int UniLineN1QL(const char *input, std::string *output) {
	lex_op = kUniLineN1QL;
	return TransformSource(input, output);
}

int CommentN1QL(const char *input, std::string *output, std::list<Pos> *pos_out) {
	lex_op = kCommentN1QL;
	n1ql_pos = pos_out;

	return TransformSource(input, output);
}

// Handles the concatenation of different types of strings.
// It tries to escape the quote of the same kind.
void handle_str_start(int state) {
	previous_state=YYSTATE;

	switch (state) {
	case DSTR:
		BEGIN DSTR;
		js_code += "\"";
		break;

	case SSTR:
		BEGIN SSTR;
		js_code += "'";
		break;

	case TSTR:
		BEGIN TSTR;
		js_code += "`";
		break;
	}
}

// Restores the previous state and adds the appropriate closing quote.
void handle_str_stop(int state) {
	if(!is_esc()) {
		BEGIN previous_state;
	}

	switch(state) {
	case DSTR:
		js_code += "\"";
		break;

	case SSTR:
		js_code += "'";
		break;

	case TSTR:
		js_code += "`";
		break;
	}
}

// Tests whether the quote character is escaped.
bool is_esc() {
	auto escaped = false;
	auto i = js_code.length();
	while(i-- > 0) {
		if(js_code[i] != '\\') {
			break;
		}

		escaped = !escaped;
	}

	return escaped;
}

// A default yywrap
extern "C" int yywrap() {
	return 1;
}
