./inputs/test_expected/expected_combined.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';

    new N1qlQuery(`create INDEX abv_id ON :bucket(abv)`);

    var value={'id':'01', 'type':'airline'};

    var res=new N1qlQuery(`insert INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid`);
    
    for(var row of res)
    {
        log(row);
    }

    res=new N1qlQuery(`select * FROM :bucket`);
    
    for(var row of res)
    {
        log(row);
    }

    new N1qlQuery(`merge INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0`);

    bucket='tutorial';
    type='actor';

    res=new N1qlQuery(`update :bucket USE KEYS "baldwin" SET type=:type RETURNING type`);
    
    for(var row of res)
    {
        log(row);
    }

    res=new N1qlQuery(`upsert INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *`);

    for(var row of res)
    {
        log(row);
    }
    
    new N1qlQuery(`delete * FROM :bucket`);
}

****************************************************************************************************
./inputs/test_expected/expected_comment.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=new N1qlQuery(`select * FROM :bucket`);
    
    /* 
        The following line must not expand as it is commented -
        SELECT * FROM :bucket
    */
    // The following line must not expand as it is commented - SELECT * FROM :bucket;
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_expected/expected_create.txt
function OnUpdate(doc, meta)
{
    var bucket='default';
    
    new N1qlQuery(`create INDEX abv_id ON :bucket(abv)`);
}

****************************************************************************************************
./inputs/test_expected/expected_delete.txt
function OnUpdate(doc, meta)
{
    var bucket='default';
    new N1qlQuery(`delete * FROM :bucket`);
}

****************************************************************************************************
./inputs/test_expected/expected_insert.txt
function OnUpdate(doc, meta){
    var bucket='`travel-sample`';
    var value={'id':'01', 'type':'airline'};

    var res=new N1qlQuery(`insert INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid`);

    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_expected/expected_merge.txt
function OnUpdate(doc, meta)
{
    var bucket='product';
    new N1qlQuery(`merge INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0`);
}
****************************************************************************************************
./inputs/test_expected/expected_select.txt
function OnUpdate(doc, meta){
    var bucket='default';

    var res=new N1qlQuery(`select * FROM :bucket`);

    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_expected/expected_str.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=new N1qlQuery(`select * FROM :bucket`);
    
    /* The following line must not expand as it is inside a string */
    log('Output of the query - SELECT * FROM :bucket');
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_expected/expected_update.txt
function OnUpdate(doc, meta) 
{
    var bucket='tutorial',
        type='actor';

    var res=new N1qlQuery(`update :bucket USE KEYS "baldwin" SET type=:type RETURNING type`);
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_expected/expected_upsert.txt
function OnUpdate(doc, meta){
    var bucket='default';

    var res=new N1qlQuery(`upsert INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *`);

    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_combined.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';

    CREATE INDEX abv_id ON :bucket(abv);

    var value={'id':'01', 'type':'airline'};

    var res=INSERT INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid;
    
    for(var row of res)
    {
        log(row);
    }

    res=SELECT * FROM :bucket;
    
    for(var row of res)
    {
        log(row);
    }

    MERGE INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0;

    bucket='tutorial';
    type='actor';

    res=UPDATE :bucket USE KEYS "baldwin" SET type=:type RETURNING type;
    
    for(var row of res)
    {
        log(row);
    }

    res=UPSERT INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *;

    for(var row of res)
    {
        log(row);
    }
    
    DELETE * FROM :bucket;
}

****************************************************************************************************
./inputs/test_inputs/input_comment.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=SELECT * FROM :bucket;
    
    /* 
        The following line must not expand as it is commented -
        SELECT * FROM :bucket
    */
    // The following line must not expand as it is commented - SELECT * FROM :bucket;

    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_create.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    CREATE INDEX abv_id ON :bucket(abv);
}

****************************************************************************************************
./inputs/test_inputs/input_create_func.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    CREATE INDEX abv_id ON :bucket(abv);
    function create(param){
        // Must crash.
    }
}

****************************************************************************************************
./inputs/test_inputs/input_create_kw.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    var create='hello';
    
    CREATE INDEX abv_id ON :bucket(abv);
}

****************************************************************************************************
./inputs/test_inputs/input_create_lbl.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    create
    :
    {
        CREATE INDEX abv_id ON :bucket(abv);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_delete.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    DELETE * FROM :bucket;
}

****************************************************************************************************
./inputs/test_inputs/input_delete_func.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    (function delete(){})();
    DELETE * FROM :bucket;
}

****************************************************************************************************
./inputs/test_inputs/input_delete_kw.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    var delete;
    DELETE * FROM :bucket;
}

****************************************************************************************************
./inputs/test_inputs/input_delete_lbl.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    delete:{DELETE * FROM :bucket;}
}

****************************************************************************************************
./inputs/test_inputs/input_insert.txt
function OnUpdate(doc, meta) 
{
    var bucket='`travel-sample`';
    var value={'id':'01', 'type':'airline'};

    var res=INSERT INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_insert_func.txt
function InSeRt(doc, meta) 
{
    var bucket='`travel-sample`';
    var value={'id':'01', 'type':'airline'};

    var res=INSERT INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_insert_kw.txt
function OnUpdate(doc, meta) 
{
    const var insert='This must crash here';
    
    var bucket='`travel-sample`';
    var value={'id':'01', 'type':'airline'};
    
    var res=INSERT INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_insert_lbl.txt
function OnUpdate(doc, meta) 
{
    var bucket='`travel-sample`';
    var value={'id':'01', 'type':'airline'};

    var res=INSERT INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid;

    for(var row of res)
    {
        log(row);insert:{}
    }
}

****************************************************************************************************
./inputs/test_inputs/input_merge.txt
function OnUpdate(doc, meta)
{
    var bucket='product';
    MERGE INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0;
}
****************************************************************************************************
./inputs/test_inputs/input_merge_func.txt
function OnUpdate(doc, meta)
{
    var bucket='product';
    function merge(){MERGE INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0;}
}
****************************************************************************************************
./inputs/test_inputs/input_merge_kw.txt
function OnUpdate(doc, meta)
{
    var bucket='product';
    var merge=MERGE INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0;
}
****************************************************************************************************
./inputs/test_inputs/input_merge_lbl.txt
function OnUpdate(doc, meta)
{
    var bucket='product';
    merge:{MERGE INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0;}
}
****************************************************************************************************
./inputs/test_inputs/input_select.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=SELECT * FROM :bucket;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_select_func.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=SELECT * FROM :bucket;
    
    function select(){
        for(var row of res)
        {
            log(row);
        }
    }
}

****************************************************************************************************
./inputs/test_inputs/input_select_kw.txt
function OnUpdate(doc, meta) 
{
    var select = 10;

    var bucket='default';
    
    var res=SELECT * FROM :bucket;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_select_lbl.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=SELECT * FROM :bucket;
    
    select:{
        for(var row of res)
        {
            log(row);
        }
    }
}

****************************************************************************************************
./inputs/test_inputs/input_str.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=SELECT * FROM :bucket;
    
    /* The following line must not expand as it is inside a string */

    log('Output of the query - SELECT * FROM :bucket');
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_update.txt
function OnUpdate(doc, meta) 
{
    var bucket='tutorial',
        type='actor';

    var res=UPDATE :bucket USE KEYS "baldwin" SET type=:type RETURNING type;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_update_func.txt
function OnUpdate(doc, meta) 
{
    var bucket='tutorial',
        type='actor';

    var res=function update(){UPDATE :bucket USE KEYS "baldwin" SET type=:type RETURNING type;}
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_update_kw.txt
function OnUpdate(doc, meta) 
{
    var bucket='tutorial',
        type='actor';
        
    var res=UPDATE :bucket USE KEYS "baldwin" SET type=:type RETURNING type;
    
    for(var row of res)
    {
        log(row);
        var update;
    }
}

****************************************************************************************************
./inputs/test_inputs/input_update_lbl.txt
update



:


{
    {function OnUpdate(doc, meta) 
    {
        var bucket='tutorial',
            type='actor';

        var res=UPDATE :bucket USE KEYS "baldwin" SET type=:type RETURNING type;
        
        for(var row of res)
        {
            log(row);
        }
    }
    }
****************************************************************************************************
./inputs/test_inputs/input_upsert.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=UPSERT INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_upsert_func.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=UPSERT INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *;
    
    for(var row of res)
    {
        function upsert(){log(row); }
    }
}

****************************************************************************************************
./inputs/test_inputs/input_upsert_kw.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=UPSERT INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *;var upsert;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_upsert_lbl.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    upsert:{
    var res=UPSERT INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *;
    }
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
