./inputs/test_expected/expected_break.txt
if (res.isInstance) {
    res.iter(function (r) {
        return res.stopIter({ 'code': 'break' });
    });
} else {
    for (var r of res) {
        break;
    }
}
****************************************************************************************************
./inputs/test_expected/expected_break_3n.txt
if (res1.isInstance) {
    res1.iter(function (item1) {
        item1 = JSON.parse(item1);
        if (res2.isInstance) {
            res2.iter(function (item2) {
                item2 = JSON.parse(item2);
                if (res3.isInstance) {
                    res3.iter(function (item3) {
                        item3 = JSON.parse(item3);
                        ++transpiledIterations;
                    });
                } else {
                    for (var item3 of res3) {
                        item3 = JSON.parse(item3);
                        ++transpiledIterations;
                    }
                }
            });
        } else {
            for (var item2 of res2) {
                item2 = JSON.parse(item2);
                if (res3.isInstance) {
                    res3.iter(function (item3) {
                        item3 = JSON.parse(item3);
                        ++transpiledIterations;
                    });
                } else {
                    for (var item3 of res3) {
                        item3 = JSON.parse(item3);
                        ++transpiledIterations;
                    }
                }
            }
        }
    });
} else {
    for (var item1 of res1) {
        item1 = JSON.parse(item1);
        if (res2.isInstance) {
            res2.iter(function (item2) {
                item2 = JSON.parse(item2);
                if (res3.isInstance) {
                    res3.iter(function (item3) {
                        item3 = JSON.parse(item3);
                        ++transpiledIterations;
                    });
                } else {
                    for (var item3 of res3) {
                        item3 = JSON.parse(item3);
                        ++transpiledIterations;
                    }
                }
            });
        } else {
            for (var item2 of res2) {
                item2 = JSON.parse(item2);
                if (res3.isInstance) {
                    res3.iter(function (item3) {
                        item3 = JSON.parse(item3);
                        ++transpiledIterations;
                    });
                } else {
                    for (var item3 of res3) {
                        item3 = JSON.parse(item3);
                        ++transpiledIterations;
                    }
                }
            }
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_break_else.txt
if (res.isInstance) {
    res.iter(function (row) {
        if (true) {
            log(row);
        } else {
            return res.stopIter({ 'code': 'break' });
        }
    });
} else {
    for (var row of res) {
        if (true)
            log(row);
        else
            break;
    }
}
****************************************************************************************************
./inputs/test_expected/expected_break_nested.txt
if (res1.isInstance) {
    res1.iter(function (i) {
        if (res2.isInstance) {
            res2.iter(function (j) {
                return res2.stopIter({ 'code': 'break' });
            });
        } else {
            for (var j of res2) {
                break;
            }
        }
    });
} else {
    for (var i of res1) {
        if (res2.isInstance) {
            res2.iter(function (j) {
                return res2.stopIter({ 'code': 'break' });
            });
        } else {
            for (var j of res2) {
                break;
            }
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_break_nested_for.txt
if (res.isInstance) {
    res.iter(function (i) {
        for (var j = 0; j < 10; ++j)
            break;
    });
} else {
    for (var i of res) {
        for (var j = 0; j < 10; ++j)
            break;
    }
}
****************************************************************************************************
./inputs/test_expected/expected_break_nested_for_in.txt
if (res.isInstance) {
    res.iter(function (i) {
        for (var j in array)
            break;
    });
} else {
    for (var i of res) {
        for (var j in array)
            break;
    }
}
****************************************************************************************************
./inputs/test_expected/expected_break_nested_if.txt
if (res1.isInstance) {
    res1.iter(function (i) {
        if (res2.isInstance) {
            res2.iter(function (j) {
                if (i == j) {
                    return res2.stopIter({ 'code': 'break' });
                }
            });
        } else {
            for (var j of res2) {
                if (i == j)
                    break;
            }
        }
    });
} else {
    for (var i of res1) {
        if (res2.isInstance) {
            res2.iter(function (j) {
                if (i == j) {
                    return res2.stopIter({ 'code': 'break' });
                }
            });
        } else {
            for (var j of res2) {
                if (i == j)
                    break;
            }
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_break_switch.txt
if (res.isInstance) {
    res.iter(function (i) {
        switch (i) {
        case '1':
            break;
        default:
            break;
        }
    });
} else {
    for (var i of res) {
        switch (i) {
        case '1':
            break;
        default:
            break;
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_break_switch_for.txt
if (res.isInstance) {
    res.iter(function (i) {
        switch (i) {
        case '1':
            if (res2.isInstance) {
                res2.iter(function (row) {
                    return res2.stopIter({ 'code': 'break' });
                });
            } else {
                for (var row of res2) {
                    break;
                }
            }
            break;
        default:
            break;
        }
    });
} else {
    for (var i of res) {
        switch (i) {
        case '1':
            if (res2.isInstance) {
                res2.iter(function (row) {
                    return res2.stopIter({ 'code': 'break' });
                });
            } else {
                for (var row of res2) {
                    break;
                }
            }
            break;
        default:
            break;
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_combined.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';

    new N1qlQuery(`create INDEX abv_id ON :bucket(abv)`);

    var value={'id':'01', 'type':'airline'};

    var res=new N1qlQuery(`insert INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid`);
    
    for(var row of res)
    {
        log(row);
    }

    res=new N1qlQuery(`select * FROM :bucket`);
    
    for(var row of res)
    {
        log(row);
    }

    new N1qlQuery(`merge INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0`);

    bucket='tutorial';
    type='actor';

    res=new N1qlQuery(`update :bucket USE KEYS "baldwin" SET type=:type RETURNING type`);
    
    for(var row of res)
    {
        log(row);
    }

    res=new N1qlQuery(`upsert INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *`);

    for(var row of res)
    {
        log(row);
    }
    
    new N1qlQuery(`delete * FROM :bucket`);
}

****************************************************************************************************
./inputs/test_expected/expected_comment.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=new N1qlQuery(`select * FROM :bucket`);
    
    /* 
        The following line must not expand as it is commented -
        SELECT * FROM :bucket
    */
    // The following line must not expand as it is commented - SELECT * FROM :bucket;
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_expected/expected_continue.txt
if (res.isInstance) {
    res.iter(function (r) {
        return;
    });
} else {
    for (var r of res) {
        continue;
    }
}
****************************************************************************************************
./inputs/test_expected/expected_continue_break.txt
if (res.isInstance) {
    res.iter(function (i) {
        if (true) {
            return res.stopIter({ 'code': 'break' });
        } else {
            return;
        }
    });
} else {
    for (var i of res) {
        if (true)
            break;
        else
            continue;
    }
}
****************************************************************************************************
./inputs/test_expected/expected_continue_nested.txt
if (res1.isInstance) {
    res1.iter(function (i) {
        if (res2.isInstance) {
            res2.iter(function (j) {
                return;
            });
        } else {
            for (var j of res2) {
                continue;
            }
        }
    });
} else {
    for (var i of res1) {
        if (res2.isInstance) {
            res2.iter(function (j) {
                return;
            });
        } else {
            for (var j of res2) {
                continue;
            }
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_create.txt
function OnUpdate(doc, meta)
{
    var bucket='default';
    
    new N1qlQuery(`create INDEX abv_id ON :bucket(abv)`);
}

****************************************************************************************************
./inputs/test_expected/expected_delete.txt
function OnUpdate(doc, meta)
{
    var bucket='default';
    new N1qlQuery(`delete * FROM :bucket`);
}

****************************************************************************************************
./inputs/test_expected/expected_insert.txt
function OnUpdate(doc, meta){
    var bucket='`travel-sample`';
    var value={'id':'01', 'type':'airline'};

    var res=new N1qlQuery(`insert INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid`);

    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_expected/expected_labeled_break1.txt
if (res.isInstance) {
    res.iter(function (r) {
        return res.stopIter({
            'code': 'labeled_break',
            'args': 'x'
        });
    });
} else {
    x:
        for (var r of res) {
            break x;
        }
}
****************************************************************************************************
./inputs/test_expected/expected_labeled_break2.txt
y:
    while (true) {
        if (res.isInstance) {
            res.iter(function (r) {
                return res.stopIter({
                    'code': 'labeled_break',
                    'args': 'y'
                });
            });
            switch (res.getReturnValue(true)) {
            case 'labeled_breaky':
                break y;
            }
        } else {
            for (var r of res) {
                break y;
            }
        }
    }
****************************************************************************************************
./inputs/test_expected/expected_labeled_break3.txt
if (res1.isInstance) {
    res1.iter(function (r) {
        if (res2.isInstance) {
            res2.iter(function (r) {
                return res2.stopIter({
                    'code': 'labeled_break',
                    'args': 'x'
                });
            });
        } else {
            x:
                for (var r of res2) {
                    break x;
                }
        }
    });
} else {
    for (var r of res1) {
        if (res2.isInstance) {
            res2.iter(function (r) {
                return res2.stopIter({
                    'code': 'labeled_break',
                    'args': 'x'
                });
            });
        } else {
            x:
                for (var r of res2) {
                    break x;
                }
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_labeled_break4.txt
if (row.isInstance) {
    row.iter(function (r) {
        x:
            while (true)
                break x;
    });
} else {
    for (var r of row) {
        x:
            while (true)
                break x;
    }
}
****************************************************************************************************
./inputs/test_expected/expected_labeled_break5.txt
if (res1.isInstance) {
    res1.iter(function (r) {
        if (res2.isInstance) {
            res2.iter(function (r) {
                return res2.stopIter({
                    'code': 'labeled_break',
                    'args': 'x'
                });
            });
            switch (res2.getReturnValue(true)) {
            case 'labeled_breakx':
                return res1.stopIter({
                    'code': 'labeled_break',
                    'args': 'x'
                });
            }
        } else {
            for (var r of res2) {
                return res1.stopIter({
                    'code': 'labeled_break',
                    'args': 'x'
                });
            }
        }
    });
} else {
    x:
        for (var r of res1) {
            if (res2.isInstance) {
                res2.iter(function (r) {
                    return res2.stopIter({
                        'code': 'labeled_break',
                        'args': 'x'
                    });
                });
                switch (res2.getReturnValue(true)) {
                case 'labeled_breakx':
                    break x;
                }
            } else {
                for (var r of res2) {
                    break x;
                }
            }
        }
}
****************************************************************************************************
./inputs/test_expected/expected_labeled_break6.txt
if (res1.isInstance) {
    res1.iter(function (r) {
        if (res2.isInstance) {
            res2.iter(function (r) {
                if (res3.isInstance) {
                    res3.iter(function (r) {
                        return res3.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    });
                    switch (res3.getReturnValue(true)) {
                    case 'labeled_breakx':
                        return res2.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    }
                } else {
                    for (var r of res3) {
                        return res2.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    }
                }
            });
            switch (res2.getReturnValue(true)) {
            case 'labeled_breakx':
                return res1.stopIter({
                    'code': 'labeled_break',
                    'args': 'x'
                });
            }
        } else {
            for (var r of res2) {
                if (res3.isInstance) {
                    res3.iter(function (r) {
                        return res3.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    });
                    switch (res3.getReturnValue(true)) {
                    case 'labeled_breakx':
                        return res1.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    }
                } else {
                    for (var r of res3) {
                        return res1.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    }
                }
            }
        }
    });
} else {
    x:
        for (var r of res1) {
            if (res2.isInstance) {
                res2.iter(function (r) {
                    if (res3.isInstance) {
                        res3.iter(function (r) {
                            return res3.stopIter({
                                'code': 'labeled_break',
                                'args': 'x'
                            });
                        });
                        switch (res3.getReturnValue(true)) {
                        case 'labeled_breakx':
                            return res2.stopIter({
                                'code': 'labeled_break',
                                'args': 'x'
                            });
                        }
                    } else {
                        for (var r of res3) {
                            return res2.stopIter({
                                'code': 'labeled_break',
                                'args': 'x'
                            });
                        }
                    }
                });
                switch (res2.getReturnValue(true)) {
                case 'labeled_breakx':
                    break x;
                }
            } else {
                for (var r of res2) {
                    if (res3.isInstance) {
                        res3.iter(function (r) {
                            return res3.stopIter({
                                'code': 'labeled_break',
                                'args': 'x'
                            });
                        });
                        switch (res3.getReturnValue(true)) {
                        case 'labeled_breakx':
                            break x;
                        }
                    } else {
                        for (var r of res3) {
                            break x;
                        }
                    }
                }
            }
        }
}
****************************************************************************************************
./inputs/test_expected/expected_labeled_break7.txt
if (res1.isInstance) {
    res1.iter(function (r) {
        if (res2.isInstance) {
            res2.iter(function (r) {
                if (res3.isInstance) {
                    res3.iter(function (r) {
                        return res3.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    });
                    switch (res3.getReturnValue(true)) {
                    case 'labeled_breakx':
                        return res2.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    }
                } else {
                    for (var r of res3) {
                        return res2.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    }
                }
            });
        } else {
            x:
                for (var r of res2) {
                    if (res3.isInstance) {
                        res3.iter(function (r) {
                            return res3.stopIter({
                                'code': 'labeled_break',
                                'args': 'x'
                            });
                        });
                        switch (res3.getReturnValue(true)) {
                        case 'labeled_breakx':
                            break x;
                        }
                    } else {
                        for (var r of res3) {
                            break x;
                        }
                    }
                }
        }
    });
} else {
    for (var r of res1) {
        if (res2.isInstance) {
            res2.iter(function (r) {
                if (res3.isInstance) {
                    res3.iter(function (r) {
                        return res3.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    });
                    switch (res3.getReturnValue(true)) {
                    case 'labeled_breakx':
                        return res2.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    }
                } else {
                    for (var r of res3) {
                        return res2.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    }
                }
            });
        } else {
            x:
                for (var r of res2) {
                    if (res3.isInstance) {
                        res3.iter(function (r) {
                            return res3.stopIter({
                                'code': 'labeled_break',
                                'args': 'x'
                            });
                        });
                        switch (res3.getReturnValue(true)) {
                        case 'labeled_breakx':
                            break x;
                        }
                    } else {
                        for (var r of res3) {
                            break x;
                        }
                    }
                }
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_labeled_continue1.txt
if (res.isInstance) {
    res.iter(function (r) {
        return;
    });
} else {
    x:
        for (var r of res) {
            continue x;
        }
}
****************************************************************************************************
./inputs/test_expected/expected_labeled_continue2.txt
y:
    while (true) {
        if (res.isInstance) {
            res.iter(function (r) {
                return res.stopIter({
                    'code': 'labeled_continue',
                    'args': 'y'
                });
            });
            switch (res.getReturnValue(true)) {
            case 'labeled_continuey':
                continue y;
            }
        } else {
            for (var r of res) {
                continue y;
            }
        }
    }

****************************************************************************************************
./inputs/test_expected/expected_labeled_continue3.txt
if (res1.isInstance) {
    res1.iter(function (r) {
        if (res2.isInstance) {
            res2.iter(function (r) {
                return;
            });
        } else {
            x:
                for (var r of res2) {
                    continue x;
                }
        }
    });
} else {
    for (var r of res1) {
        if (res2.isInstance) {
            res2.iter(function (r) {
                return;
            });
        } else {
            x:
                for (var r of res2) {
                    continue x;
                }
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_labeled_continue4.txt
if (row.isInstance) {
    row.iter(function (r) {
        x:
            while (true)
                continue x;
    });
} else {
    for (var r of row) {
        x:
            while (true)
                continue x;
    }
}
****************************************************************************************************
./inputs/test_expected/expected_labeled_continue5.txt
if (res1.isInstance) {
    res1.iter(function (r) {
        if (res2.isInstance) {
            res2.iter(function (r) {
                return res2.stopIter({
                    'code': 'labeled_continue',
                    'args': 'x'
                });
            });
            switch (res2.getReturnValue(true)) {
            case 'labeled_continuex':
                return;
            }
        } else {
            for (var r of res2) {
                return;
            }
        }
    });
} else {
    x:
        for (var r of res1) {
            if (res2.isInstance) {
                res2.iter(function (r) {
                    return res2.stopIter({
                        'code': 'labeled_continue',
                        'args': 'x'
                    });
                });
                switch (res2.getReturnValue(true)) {
                case 'labeled_continuex':
                    continue x;
                }
            } else {
                for (var r of res2) {
                    continue x;
                }
            }
        }
}

****************************************************************************************************
./inputs/test_expected/expected_labeled_continue6.txt
if (res1.isInstance) {
    res1.iter(function (r) {
        if (res2.isInstance) {
            res2.iter(function (r) {
                if (res3.isInstance) {
                    res3.iter(function (r) {
                        return res3.stopIter({
                            'code': 'labeled_continue',
                            'args': 'x'
                        });
                    });
                    switch (res3.getReturnValue(true)) {
                    case 'labeled_continuex':
                        return res2.stopIter({
                            'code': 'labeled_continue',
                            'args': 'x'
                        });
                    }
                } else {
                    for (var r of res3) {
                        return res2.stopIter({
                            'code': 'labeled_continue',
                            'args': 'x'
                        });
                    }
                }
            });
            switch (res2.getReturnValue(true)) {
            case 'labeled_continuex':
                return;
            }
        } else {
            for (var r of res2) {
                if (res3.isInstance) {
                    res3.iter(function (r) {
                        return res3.stopIter({
                            'code': 'labeled_continue',
                            'args': 'x'
                        });
                    });
                    switch (res3.getReturnValue(true)) {
                    case 'labeled_continuex':
                        return;
                    }
                } else {
                    for (var r of res3) {
                        return;
                    }
                }
            }
        }
    });
} else {
    x:
        for (var r of res1) {
            if (res2.isInstance) {
                res2.iter(function (r) {
                    if (res3.isInstance) {
                        res3.iter(function (r) {
                            return res3.stopIter({
                                'code': 'labeled_continue',
                                'args': 'x'
                            });
                        });
                        switch (res3.getReturnValue(true)) {
                        case 'labeled_continuex':
                            return res2.stopIter({
                                'code': 'labeled_continue',
                                'args': 'x'
                            });
                        }
                    } else {
                        for (var r of res3) {
                            return res2.stopIter({
                                'code': 'labeled_continue',
                                'args': 'x'
                            });
                        }
                    }
                });
                switch (res2.getReturnValue(true)) {
                case 'labeled_continuex':
                    continue x;
                }
            } else {
                for (var r of res2) {
                    if (res3.isInstance) {
                        res3.iter(function (r) {
                            return res3.stopIter({
                                'code': 'labeled_continue',
                                'args': 'x'
                            });
                        });
                        switch (res3.getReturnValue(true)) {
                        case 'labeled_continuex':
                            continue x;
                        }
                    } else {
                        for (var r of res3) {
                            continue x;
                        }
                    }
                }
            }
        }
}
****************************************************************************************************
./inputs/test_expected/expected_labeled_continue7.txt
if (res1.isInstance) {
    res1.iter(function (r) {
        if (res2.isInstance) {
            res2.iter(function (r) {
                if (res3.isInstance) {
                    res3.iter(function (r) {
                        return res3.stopIter({
                            'code': 'labeled_continue',
                            'args': 'x'
                        });
                    });
                    switch (res3.getReturnValue(true)) {
                    case 'labeled_continuex':
                        return;
                    }
                } else {
                    for (var r of res3) {
                        return;
                    }
                }
            });
        } else {
            x:
                for (var r of res2) {
                    if (res3.isInstance) {
                        res3.iter(function (r) {
                            return res3.stopIter({
                                'code': 'labeled_continue',
                                'args': 'x'
                            });
                        });
                        switch (res3.getReturnValue(true)) {
                        case 'labeled_continuex':
                            continue x;
                        }
                    } else {
                        for (var r of res3) {
                            continue x;
                        }
                    }
                }
        }
    });
} else {
    for (var r of res1) {
        if (res2.isInstance) {
            res2.iter(function (r) {
                if (res3.isInstance) {
                    res3.iter(function (r) {
                        return res3.stopIter({
                            'code': 'labeled_continue',
                            'args': 'x'
                        });
                    });
                    switch (res3.getReturnValue(true)) {
                    case 'labeled_continuex':
                        return;
                    }
                } else {
                    for (var r of res3) {
                        return;
                    }
                }
            });
        } else {
            x:
                for (var r of res2) {
                    if (res3.isInstance) {
                        res3.iter(function (r) {
                            return res3.stopIter({
                                'code': 'labeled_continue',
                                'args': 'x'
                            });
                        });
                        switch (res3.getReturnValue(true)) {
                        case 'labeled_continuex':
                            continue x;
                        }
                    } else {
                        for (var r of res3) {
                            continue x;
                        }
                    }
                }
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_labeled_continue8.txt
x:
    while (true) {
        if (res1.isInstance) {
            res1.iter(function (r) {
                if (res2.isInstance) {
                    res2.iter(function (r) {
                        if (res3.isInstance) {
                            res3.iter(function (r) {
                                return res3.stopIter({
                                    'code': 'labeled_continue',
                                    'args': 'x'
                                });
                            });
                            switch (res3.getReturnValue(true)) {
                            case 'labeled_continuex':
                                return res2.stopIter({
                                    'code': 'labeled_continue',
                                    'args': 'x'
                                });
                            }
                        } else {
                            for (var r of res3) {
                                return res2.stopIter({
                                    'code': 'labeled_continue',
                                    'args': 'x'
                                });
                            }
                        }
                    });
                    switch (res2.getReturnValue(true)) {
                    case 'labeled_continuex':
                        return res1.stopIter({
                            'code': 'labeled_continue',
                            'args': 'x'
                        });
                    }
                } else {
                    for (var r of res2) {
                        if (res3.isInstance) {
                            res3.iter(function (r) {
                                return res3.stopIter({
                                    'code': 'labeled_continue',
                                    'args': 'x'
                                });
                            });
                            switch (res3.getReturnValue(true)) {
                            case 'labeled_continuex':
                                return res1.stopIter({
                                    'code': 'labeled_continue',
                                    'args': 'x'
                                });
                            }
                        } else {
                            for (var r of res3) {
                                return res1.stopIter({
                                    'code': 'labeled_continue',
                                    'args': 'x'
                                });
                            }
                        }
                    }
                }
            });
            switch (res1.getReturnValue(true)) {
            case 'labeled_continuex':
                continue x;
            }
        } else {
            for (var r of res1) {
                if (res2.isInstance) {
                    res2.iter(function (r) {
                        if (res3.isInstance) {
                            res3.iter(function (r) {
                                return res3.stopIter({
                                    'code': 'labeled_continue',
                                    'args': 'x'
                                });
                            });
                            switch (res3.getReturnValue(true)) {
                            case 'labeled_continuex':
                                return res2.stopIter({
                                    'code': 'labeled_continue',
                                    'args': 'x'
                                });
                            }
                        } else {
                            for (var r of res3) {
                                return res2.stopIter({
                                    'code': 'labeled_continue',
                                    'args': 'x'
                                });
                            }
                        }
                    });
                    switch (res2.getReturnValue(true)) {
                    case 'labeled_continuex':
                        continue x;
                    }
                } else {
                    for (var r of res2) {
                        if (res3.isInstance) {
                            res3.iter(function (r) {
                                return res3.stopIter({
                                    'code': 'labeled_continue',
                                    'args': 'x'
                                });
                            });
                            switch (res3.getReturnValue(true)) {
                            case 'labeled_continuex':
                                continue x;
                            }
                        } else {
                            for (var r of res3) {
                                continue x;
                            }
                        }
                    }
                }
            }
        }
    }
****************************************************************************************************
./inputs/test_expected/expected_merge.txt
function OnUpdate(doc, meta)
{
    var bucket='product';
    new N1qlQuery(`merge INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0`);
}
****************************************************************************************************
./inputs/test_expected/expected_mixed1.txt
function query() {
    if (res1.isInstance) {
        res1.iter(function (row) {
            if (res2.isInstance) {
                res2.iter(function (row) {
                    if (row.length > 5) {
                        return res2.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    }
                    return res2.stopIter({
                        'code': 'return',
                        'args': '(row)',
                        'data': row
                    });
                });
                switch (res2.getReturnValue(true)) {
                case 'labeled_breakx':
                    return res1.stopIter({
                        'code': 'labeled_break',
                        'args': 'x'
                    });
                case 'return(row)':
                    return res1.stopIter({
                        'code': 'return',
                        'args': 'res2.getReturnValue().data',
                        'data': res2.getReturnValue().data
                    });
                }
            } else {
                for (var row of res2) {
                    if (row.length > 5)
                        return res1.stopIter({
                            'code': 'labeled_break',
                            'args': 'x'
                        });
                    return res1.stopIter({
                        'code': 'return',
                        'args': '(row)',
                        'data': row
                    });
                }
            }
        });
        switch (res1.getReturnValue(true)) {
        case 'returnres2.getReturnValue().data':
            return res1.getReturnValue().data;;
        case 'return(row)':
            return res1.getReturnValue().data;;
        }
    } else {
        x:
            for (var row of res1) {
                if (res2.isInstance) {
                    res2.iter(function (row) {
                        if (row.length > 5) {
                            return res2.stopIter({
                                'code': 'labeled_break',
                                'args': 'x'
                            });
                        }
                        return res2.stopIter({
                            'code': 'return',
                            'args': '(row)',
                            'data': row
                        });
                    });
                    switch (res2.getReturnValue(true)) {
                    case 'labeled_breakx':
                        break x;
                    case 'return(row)':
                        return res2.getReturnValue().data;
                    }
                } else {
                    for (var row of res2) {
                        if (row.length > 5)
                            break x;
                        return row;
                    }
                }
            }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_return1.txt
function query() {
    if (res.isInstance) {
        res.iter(function (row) {
            return res.stopIter({
                'code': 'return',
                'args': '(null)',
                'data': null
            });
        });
        switch (res.getReturnValue(true)) {
        case 'return(null)':
            return res.getReturnValue().data;;
        }
    } else {
        for (var row of res) {
            return;
        }
    }
    return;
}
****************************************************************************************************
./inputs/test_expected/expected_return2.txt
function query() {
    if (res.isInstance) {
        res.iter(function (row) {
            return res.stopIter({
                'code': 'return',
                'args': '(query(\'x\'))',
                'data': query('x')
            });
            return res.stopIter({
                'code': 'return',
                'args': '(1234)',
                'data': 1234
            });
            return res.stopIter({
                'code': 'return',
                'args': '(query(\'escape\\\'\'))',
                'data': query('escape\'')
            });
            return res.stopIter({
                'code': 'return',
                'args': '({\n    \'code\': \'return\',\n    \'arg\': \'null\'\n})',
                'data': {
                    'code': 'return',
                    'arg': 'null'
                }
            });
        });
        switch (res.getReturnValue(true)) {
        case 'return(query(\'x\'))':
            return res.getReturnValue().data;;
        case 'return(1234)':
            return res.getReturnValue().data;;
        case 'return(query(\'escape\\\'\'))':
            return res.getReturnValue().data;;
        case 'return({\n    \'code\': \'return\',\n    \'arg\': \'null\'\n})':
            return res.getReturnValue().data;;
        }
    } else {
        for (var row of res) {
            return query('x');
            return 1234;
            return query('escape\'');
            return {
                'code': 'return',
                'arg': 'null'
            };
        }
    }
    return;
}
****************************************************************************************************
./inputs/test_expected/expected_return3.txt
function query() {
    if (res.isInstance) {
        res.iter(function (row) {
            return res.stopIter({
                'code': 'return',
                'args': '(function () {\n    return x;\n})',
                'data': function () {
                    return x;
                }
            });
        });
        switch (res.getReturnValue(true)) {
        case 'return(function () {\n    return x;\n})':
            return res.getReturnValue().data;;
        }
    } else {
        for (var row of res) {
            return function () {
                return x;
            };
        }
    }
    return;
}
****************************************************************************************************
./inputs/test_expected/expected_return4.txt
function query() {
    if (res1.isInstance) {
        res1.iter(function (row) {
            if (res2.isInstance) {
                res2.iter(function (row) {
                    if (res3.isInstance) {
                        res3.iter(function (row) {
                            return res3.stopIter({
                                'code': 'return',
                                'args': '(x)',
                                'data': x
                            });
                        });
                        switch (res3.getReturnValue(true)) {
                        case 'return(x)':
                            return res2.stopIter({
                                'code': 'return',
                                'args': 'res3.getReturnValue().data',
                                'data': res3.getReturnValue().data
                            });
                        }
                    } else {
                        for (var row of res3) {
                            return res2.stopIter({
                                'code': 'return',
                                'args': '(x)',
                                'data': x
                            });
                        }
                    }
                });
                switch (res2.getReturnValue(true)) {
                case 'returnres3.getReturnValue().data':
                    return res1.stopIter({
                        'code': 'return',
                        'args': 'res2.getReturnValue().data',
                        'data': res2.getReturnValue().data
                    });
                case 'return(x)':
                    return res1.stopIter({
                        'code': 'return',
                        'args': 'res2.getReturnValue().data',
                        'data': res2.getReturnValue().data
                    });
                }
            } else {
                for (var row of res2) {
                    if (res3.isInstance) {
                        res3.iter(function (row) {
                            return res3.stopIter({
                                'code': 'return',
                                'args': '(x)',
                                'data': x
                            });
                        });
                        switch (res3.getReturnValue(true)) {
                        case 'return(x)':
                            return res1.stopIter({
                                'code': 'return',
                                'args': 'res3.getReturnValue().data',
                                'data': res3.getReturnValue().data
                            });
                        }
                    } else {
                        for (var row of res3) {
                            return res1.stopIter({
                                'code': 'return',
                                'args': '(x)',
                                'data': x
                            });
                        }
                    }
                }
            }
        });
        switch (res1.getReturnValue(true)) {
        case 'returnres2.getReturnValue().data':
            return res1.getReturnValue().data;;
        case 'returnres3.getReturnValue().data':
            return res1.getReturnValue().data;;
        case 'return(x)':
            return res1.getReturnValue().data;;
        }
    } else {
        for (var row of res1) {
            if (res2.isInstance) {
                res2.iter(function (row) {
                    if (res3.isInstance) {
                        res3.iter(function (row) {
                            return res3.stopIter({
                                'code': 'return',
                                'args': '(x)',
                                'data': x
                            });
                        });
                        switch (res3.getReturnValue(true)) {
                        case 'return(x)':
                            return res2.stopIter({
                                'code': 'return',
                                'args': 'res3.getReturnValue().data',
                                'data': res3.getReturnValue().data
                            });
                        }
                    } else {
                        for (var row of res3) {
                            return res2.stopIter({
                                'code': 'return',
                                'args': '(x)',
                                'data': x
                            });
                        }
                    }
                });
                switch (res2.getReturnValue(true)) {
                case 'returnres3.getReturnValue().data':
                    return res2.getReturnValue().data;
                case 'return(x)':
                    return res2.getReturnValue().data;
                }
            } else {
                for (var row of res2) {
                    if (res3.isInstance) {
                        res3.iter(function (row) {
                            return res3.stopIter({
                                'code': 'return',
                                'args': '(x)',
                                'data': x
                            });
                        });
                        switch (res3.getReturnValue(true)) {
                        case 'return(x)':
                            return res3.getReturnValue().data;
                        }
                    } else {
                        for (var row of res3) {
                            return x;
                        }
                    }
                }
            }
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_return5.txt
function query() {
    if (res1.isInstance) {
        res1.iter(function (row) {
            if (res2.isInstance) {
                res2.iter(function (row) {
                    return res2.stopIter({
                        'code': 'return',
                        'args': '(x)',
                        'data': x
                    });
                });
                switch (res2.getReturnValue(true)) {
                case 'return(x)':
                    return res1.stopIter({
                        'code': 'return',
                        'args': 'res2.getReturnValue().data',
                        'data': res2.getReturnValue().data
                    });
                }
            } else {
                for (var row of res2) {
                    return res1.stopIter({
                        'code': 'return',
                        'args': '(x)',
                        'data': x
                    });
                }
            }
        });
        switch (res1.getReturnValue(true)) {
        case 'returnres2.getReturnValue().data':
            return res1.getReturnValue().data;;
        case 'return(x)':
            return res1.getReturnValue().data;;
        }
    } else {
        for (var row of res1) {
            if (res2.isInstance) {
                res2.iter(function (row) {
                    return res2.stopIter({
                        'code': 'return',
                        'args': '(x)',
                        'data': x
                    });
                });
                switch (res2.getReturnValue(true)) {
                case 'return(x)':
                    return res2.getReturnValue().data;
                }
            } else {
                for (var row of res2) {
                    return x;
                }
            }
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_return6.txt
function query() {
    if (res1.isInstance) {
        res1.iter(function (row) {
            if (res2.isInstance) {
                res2.iter(function (row) {
                    return res2.stopIter({
                        'code': 'return',
                        'args': '(function () {\n    return inner;\n})',
                        'data': function () {
                            return inner;
                        }
                    });
                });
                switch (res2.getReturnValue(true)) {
                case 'return(function () {\n    return inner;\n})':
                    return res1.stopIter({
                        'code': 'return',
                        'args': 'res2.getReturnValue().data',
                        'data': res2.getReturnValue().data
                    });
                }
            } else {
                for (var row of res2) {
                    return res1.stopIter({
                        'code': 'return',
                        'args': '(function () {\n    return inner;\n})',
                        'data': function () {
                            return inner;
                        }
                    });
                }
            }
        });
        switch (res1.getReturnValue(true)) {
        case 'returnres2.getReturnValue().data':
            return res1.getReturnValue().data;;
        case 'return(function () {\n    return inner;\n})':
            return res1.getReturnValue().data;;
        }
    } else {
        for (var row of res1) {
            if (res2.isInstance) {
                res2.iter(function (row) {
                    return res2.stopIter({
                        'code': 'return',
                        'args': '(function () {\n    return inner;\n})',
                        'data': function () {
                            return inner;
                        }
                    });
                });
                switch (res2.getReturnValue(true)) {
                case 'return(function () {\n    return inner;\n})':
                    return res2.getReturnValue().data;
                }
            } else {
                for (var row of res2) {
                    return function () {
                        return inner;
                    };
                }
            }
        }
    }
    return x;
}
****************************************************************************************************
./inputs/test_expected/expected_return7.txt
function query() {
    if (res1.isInstance) {
        res1.iter(function (row) {
            (function () {
                if (res2.isInstance) {
                    res2.iter(function (row) {
                        return res2.stopIter({
                            'code': 'return',
                            'args': '(row)',
                            'data': row
                        });
                    });
                    switch (res2.getReturnValue(true)) {
                    case 'return(row)':
                        return res2.getReturnValue().data;;
                    }
                } else {
                    for (var row of res2) {
                        return row;
                    }
                }
            }());
        });
    } else {
        for (var row of res1) {
            (function () {
                if (res2.isInstance) {
                    res2.iter(function (row) {
                        return res2.stopIter({
                            'code': 'return',
                            'args': '(row)',
                            'data': row
                        });
                    });
                    switch (res2.getReturnValue(true)) {
                    case 'return(row)':
                        return res2.getReturnValue().data;;
                    }
                } else {
                    for (var row of res2) {
                        return row;
                    }
                }
            }());
        }
    }
}
****************************************************************************************************
./inputs/test_expected/expected_select.txt
function OnUpdate(doc, meta){
    var bucket='default';

    var res=new N1qlQuery(`select * FROM :bucket`);

    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_expected/expected_str.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=new N1qlQuery(`select * FROM :bucket`);
    
    /* The following line must not expand as it is inside a string */
    log('Output of the query - SELECT * FROM :bucket');
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_expected/expected_update.txt
function OnUpdate(doc, meta) 
{
    var bucket='tutorial',
        type='actor';

    var res=new N1qlQuery(`update :bucket USE KEYS "baldwin" SET type=:type RETURNING type`);
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_expected/expected_upsert.txt
function OnUpdate(doc, meta){
    var bucket='default';

    var res=new N1qlQuery(`upsert INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *`);

    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_break.txt
for(var r of res)
    break;
****************************************************************************************************
./inputs/test_inputs/input_break_3n.txt
for (var item1 of res1) {
    item1 = JSON.parse(item1);
    for (var item2 of res2) {
        item2 = JSON.parse(item2);
        for (var item3 of res3) {
            item3 = JSON.parse(item3);
            ++transpiledIterations;
        }
    }
}
****************************************************************************************************
./inputs/test_inputs/input_break_else.txt
for(var row of res)
    if(true)
        log(row);
    else
        break;
****************************************************************************************************
./inputs/test_inputs/input_break_nested.txt
for(var i of res1)
    for(var j of res2)
        break;
****************************************************************************************************
./inputs/test_inputs/input_break_nested_for.txt
for(var i of res)
    for(var j=0; j<10; ++j)
        break;
****************************************************************************************************
./inputs/test_inputs/input_break_nested_for_in.txt
for(var i of res)
    for(var j in array)
        break;
****************************************************************************************************
./inputs/test_inputs/input_break_nested_if.txt
for(var i of res1)
    for(var j of res2)
        if(i==j)
            break;
****************************************************************************************************
./inputs/test_inputs/input_break_switch.txt
for(var i of res) {
    switch(i) {
    case '1':
        break;
    default:
        break;
    }
}
****************************************************************************************************
./inputs/test_inputs/input_break_switch_for.txt
for(var i of res) {
    switch(i) {
    case '1':
        for(var row of res2)
            break;
        break;
    default:
        break;
    }
}
****************************************************************************************************
./inputs/test_inputs/input_combined.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';

    CREATE INDEX abv_id ON :bucket(abv);

    var value={'id':'01', 'type':'airline'};

    var res=INSERT INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid;
    
    for(var row of res)
    {
        log(row);
    }

    res=SELECT * FROM :bucket;
    
    for(var row of res)
    {
        log(row);
    }

    MERGE INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0;

    bucket='tutorial';
    type='actor';

    res=UPDATE :bucket USE KEYS "baldwin" SET type=:type RETURNING type;
    
    for(var row of res)
    {
        log(row);
    }

    res=UPSERT INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *;

    for(var row of res)
    {
        log(row);
    }
    
    DELETE * FROM :bucket;
}

****************************************************************************************************
./inputs/test_inputs/input_comment.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=SELECT * FROM :bucket;
    
    /* 
        The following line must not expand as it is commented -
        SELECT * FROM :bucket
    */
    // The following line must not expand as it is commented - SELECT * FROM :bucket;

    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_continue.txt
for(var r of res)
    continue;
****************************************************************************************************
./inputs/test_inputs/input_continue_break.txt
for(var i of res)
    if(true)
        break;
    else
        continue;
****************************************************************************************************
./inputs/test_inputs/input_continue_nested.txt
for(var i of res1)
    for(var j of res2)
        continue;
****************************************************************************************************
./inputs/test_inputs/input_create.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    CREATE INDEX abv_id ON :bucket(abv);
}

****************************************************************************************************
./inputs/test_inputs/input_create_func.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    CREATE INDEX abv_id ON :bucket(abv);
    function create(param){
        // Must crash.
    }
}

****************************************************************************************************
./inputs/test_inputs/input_create_kw.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    var create='hello';
    
    CREATE INDEX abv_id ON :bucket(abv);
}

****************************************************************************************************
./inputs/test_inputs/input_create_lbl.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    create
    :
    {
        CREATE INDEX abv_id ON :bucket(abv);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_delete.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    DELETE * FROM :bucket;
}

****************************************************************************************************
./inputs/test_inputs/input_delete_func.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    (function delete(){})();
    DELETE * FROM :bucket;
}

****************************************************************************************************
./inputs/test_inputs/input_delete_kw.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    var delete;
    DELETE * FROM :bucket;
}

****************************************************************************************************
./inputs/test_inputs/input_delete_lbl.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    delete:{DELETE * FROM :bucket;}
}

****************************************************************************************************
./inputs/test_inputs/input_insert.txt
function OnUpdate(doc, meta) 
{
    var bucket='`travel-sample`';
    var value={'id':'01', 'type':'airline'};

    var res=INSERT INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_insert_func.txt
function InSeRt(doc, meta) 
{
    var bucket='`travel-sample`';
    var value={'id':'01', 'type':'airline'};

    var res=INSERT INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_insert_kw.txt
function OnUpdate(doc, meta) 
{
    const var insert='This must crash here';
    
    var bucket='`travel-sample`';
    var value={'id':'01', 'type':'airline'};
    
    var res=INSERT INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_insert_lbl.txt
function OnUpdate(doc, meta) 
{
    var bucket='`travel-sample`';
    var value={'id':'01', 'type':'airline'};

    var res=INSERT INTO :bucket (KEY, VALUE) VALUES ('k001', :value) RETURNING META.id() as docid;

    for(var row of res)
    {
        log(row);insert:{}
    }
}

****************************************************************************************************
./inputs/test_inputs/input_labeled_break1.txt
x:for(var r of res)
    break x;
****************************************************************************************************
./inputs/test_inputs/input_labeled_break2.txt
y:while (true) {
    for (var r of res)
        break y;
}
****************************************************************************************************
./inputs/test_inputs/input_labeled_break3.txt
for (var r of res1) {
    x:for (var r of res2)
        break x;
}
****************************************************************************************************
./inputs/test_inputs/input_labeled_break4.txt
for(var r of row)
	x:while(true)
		break x;
****************************************************************************************************
./inputs/test_inputs/input_labeled_break5.txt
x:for(var r of res1)
	for(var r of res2)
		break x;
****************************************************************************************************
./inputs/test_inputs/input_labeled_break6.txt
x:for (var r of res1)
    for (var r of res2)
        for (var r of res3)
            break x;
****************************************************************************************************
./inputs/test_inputs/input_labeled_break7.txt
for (var r of res1)
    x:for (var r of res2)
        for (var r of res3)
            break x;
****************************************************************************************************
./inputs/test_inputs/input_labeled_continue1.txt
x:for(var r of res)
    continue x;
****************************************************************************************************
./inputs/test_inputs/input_labeled_continue2.txt
y:while (true) {
    for (var r of res)
        continue y;
}
****************************************************************************************************
./inputs/test_inputs/input_labeled_continue3.txt
for (var r of res1) {
    x:for (var r of res2)
        continue x;
}
****************************************************************************************************
./inputs/test_inputs/input_labeled_continue4.txt
for(var r of row)
	x:while(true)
		continue x;
****************************************************************************************************
./inputs/test_inputs/input_labeled_continue5.txt
x:for(var r of res1)
	for(var r of res2)
		continue x;
****************************************************************************************************
./inputs/test_inputs/input_labeled_continue6.txt
x:for (var r of res1)
    for (var r of res2)
        for (var r of res3)
            continue x;
****************************************************************************************************
./inputs/test_inputs/input_labeled_continue7.txt
for (var r of res1)
    x:for (var r of res2)
        for (var r of res3)
            continue x;
****************************************************************************************************
./inputs/test_inputs/input_labeled_continue8.txt
x: while (true) {
		for (var r of res1)
			for (var r of res2)
				for (var r of res3)
					continue x;
	}
****************************************************************************************************
./inputs/test_inputs/input_merge.txt
function OnUpdate(doc, meta)
{
    var bucket='product';
    MERGE INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0;
}
****************************************************************************************************
./inputs/test_inputs/input_merge_func.txt
function OnUpdate(doc, meta)
{
    var bucket='product';
    function merge(){MERGE INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0;}
}
****************************************************************************************************
./inputs/test_inputs/input_merge_kw.txt
function OnUpdate(doc, meta)
{
    var bucket='product';
    var merge=MERGE INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0;
}
****************************************************************************************************
./inputs/test_inputs/input_merge_lbl.txt
function OnUpdate(doc, meta)
{
    var bucket='product';
    merge:{MERGE INTO :bucket p USING orders o ON KEY o.productId WHEN MATCHED THEN UPDATE SET p.lastSaleDate = o.orderDate WHEN MATCHED THEN DELETE WHERE p.inventoryCount  <= 0;}
}
****************************************************************************************************
./inputs/test_inputs/input_mixed1.txt
function query() {
    x:for (var row of res1)
        for (var row of res2) {
            if (row.length > 5)
                break x;
            return row;
        }
}
****************************************************************************************************
./inputs/test_inputs/input_query_1.txt
var count = 0;
var res1 = new N1qlQuery(`SELECT * FROM \`beer-sample\` LIMIT 10;`);
var res2 = new N1qlQuery(`SELECT * FROM \`beer-sample\` LIMIT 10;`);
var res3 = new N1qlQuery(`SELECT * FROM \`beer-sample\` LIMIT 10;`);

x:for (var r1 of res1) {
    log('level 1:\t' + r1['beer-sample'].name);
    for (var r2 of res2) {
        log('level 2:\t' + r2['beer-sample'].name);
        try {
            for (var r3 of res3) {
                ++count;
                log('level 3:\t' + r3['beer-sample'].name);
                throw 'an exception';
            }
        } catch (e) {
            log(e);
        }
    }
}

log('res1 meta:\t' + JSON.stringify(res1.metadata));
log('res2 meta:\t' + res2.metadata);
log('res3 meta:\t' + res3.metadata);

log('iterations:\t' + count);
****************************************************************************************************
./inputs/test_inputs/input_return1.txt
function query(){
	for(var row of res) {
		return;
	}
	return;
}
****************************************************************************************************
./inputs/test_inputs/input_return2.txt
function query(){
	for(var row of res) {
		return query('x');
		return 1234;
		return query('escape\'');
		return {'code':'return', "arg":"null"};
	}
	return;
}
****************************************************************************************************
./inputs/test_inputs/input_return3.txt
function query() {
	for(var row of res) {
		return (function(){
			return x;
		});
	}
	return;
}
****************************************************************************************************
./inputs/test_inputs/input_return4.txt
function query() {
    for (var row of res1)
        for (var row of res2)
            for (var row of res3)
                return x;
}
****************************************************************************************************
./inputs/test_inputs/input_return5.txt
function query() {
    for (var row of res1)
        for (var row of res2)
            return x;
}
****************************************************************************************************
./inputs/test_inputs/input_return6.txt
function query() {
    for (var row of res1)
        for (var row of res2)
            return (function () {
                return inner;
            })
            return x;
}
****************************************************************************************************
./inputs/test_inputs/input_return7.txt
function query() {
    for (var row of res1)
        (function () {
            for (var row of res2)
                return row;
        })();
}
****************************************************************************************************
./inputs/test_inputs/input_select.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=SELECT * FROM :bucket WHERE name = ':bucket';
    
		var res=new N1qlQuery(`SELECT * FROM `+bucket +`WHERE name = ':bucket'`);

    var res=SELECT * FROM system:bucket WHERE name = ':bucket';
    var res=SELECT * FROM `beer-sample` WHERE name = ':bucket';
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_select_func.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=SELECT * FROM :bucket;
    
    function select(){
        for(var row of res)
        {
            log(row);
        }
    }
}

****************************************************************************************************
./inputs/test_inputs/input_select_kw.txt
function OnUpdate(doc, meta) 
{
    var select = 10;

    var bucket='default';
    
    var res=SELECT * FROM :bucket;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_select_lbl.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=SELECT * FROM :bucket;
    
    select:{
        for(var row of res)
        {
            log(row);
        }
    }
}

****************************************************************************************************
./inputs/test_inputs/input_str.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=SELECT * FROM :bucket;
    
    /* The following line must not expand as it is inside a string */

    log('Output of the query - SELECT * FROM :bucket');
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_update.txt
function OnUpdate(doc, meta) 
{
    var bucket='tutorial',
        type='actor';

    var res=UPDATE :bucket USE KEYS "baldwin" SET type=:type RETURNING type;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_update_func.txt
function OnUpdate(doc, meta) 
{
    var bucket='tutorial',
        type='actor';

    var res=function update(){UPDATE :bucket USE KEYS "baldwin" SET type=:type RETURNING type;}
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_update_kw.txt
function OnUpdate(doc, meta) 
{
    var bucket='tutorial',
        type='actor';
        
    var res=UPDATE :bucket USE KEYS "baldwin" SET type=:type RETURNING type;
    
    for(var row of res)
    {
        log(row);
        var update;
    }
}

****************************************************************************************************
./inputs/test_inputs/input_update_lbl.txt
update



:


{
    {function OnUpdate(doc, meta) 
    {
        var bucket='tutorial',
            type='actor';

        var res=UPDATE :bucket USE KEYS "baldwin" SET type=:type RETURNING type;
        
        for(var row of res)
        {
            log(row);
        }
    }
    }
****************************************************************************************************
./inputs/test_inputs/input_upsert.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=UPSERT INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_upsert_func.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=UPSERT INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *;
    
    for(var row of res)
    {
        function upsert(){log(row); }
    }
}

****************************************************************************************************
./inputs/test_inputs/input_upsert_kw.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    
    var res=UPSERT INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *;var upsert;
    
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
./inputs/test_inputs/input_upsert_lbl.txt
function OnUpdate(doc, meta) 
{
    var bucket='default';
    upsert:{
    var res=UPSERT INTO product (KEY, VALUE) VALUES ("odwalla-juice1", { "productId": "odwalla-juice1", "unitPrice": 5.40, "type": "product", "color":"red"}) RETURNING *;
    }
    for(var row of res)
    {
        log(row);
    }
}

****************************************************************************************************
